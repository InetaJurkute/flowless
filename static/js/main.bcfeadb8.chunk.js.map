{"version":3,"sources":["context/DataContext.tsx","components/GoalSetter.tsx","utils.tsx","context/GoalContext.tsx","widgets/ChallengeCard.tsx","theme/colors.ts","components/icons/WaterIcon.tsx","components/MenuBar.tsx","components/BackLink.tsx","pages/ChallengesPage.tsx","charts/theme.tsx","charts/PowerConsuptionPerDayChart.tsx","charts/GithubContributionsChart.tsx","charts/AppliancePie.tsx","widgets/SpendCard.tsx","components/icons/EnergyIcon.tsx","components/icons/MoneyIcon.tsx","components/icons/ChallengeIcon.tsx","pages/Dashboard.tsx","charts/UsagePerDayChart.tsx","widgets/HorizontalCard.tsx","widgets/AverageList.tsx","pages/ConsumptionPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Appliance","currentDate","DateTime","now","minus","years","currentMonth","startOf","GoalType","filterData","data","from","to","filteredDataSet","houses","apartments","forEach","a","push","Shower","measurements","filter","m","TimeStamp","KitchenFaucet","Faucet","Dishwasher","WashingMachine","undefined","toString","DataContext","createContext","getAverage","appliance","reduce","acc","appartment","parseFloat","Consumption","people","length","toFixed","GoalContext","litersGoal","localStorage","getItem","setLitersGoal","goal","console","log","moneyGoal","setMoneyGoal","powerGoal","setPowerGoal","waterLiterPrice","getAverageHeatingForLiterOfWater","months","myApartmentData","sumByDevice","Object","values","map","myMeasurements","liters","sumBy","x","power","Power_Consumption","GoalSetter","useContext","useState","newGoalSet","setNewGoalSet","initialValues","monthlyGoalType","Liters","monthlyGoalAmount","onSubmit","Power","setItem","forecastedMoney","goalLiters","parseInt","getForecastedBudget","Money","forecastedLiters","getForecastedLiters","handleChange","handleBlur","spacing","name","value","onChange","onBlur","style","backgroundColor","label","field","form","isInvalid","errors","touched","id","type","component","ChallengeCard","title","onClick","subtext","rest","minHeight","p","borderWidth","fontSize","blueColor","mediumGrayColor","getAppIcon","color","xmlns","enableBackground","height","viewBox","width","fill","d","WaterIcon","border","alignItems","justifyContent","borderRadius","MenuBar","bg","w","boxShadow","marginRight","fontWeight","as","IconButton","aria-label","icon","variant","BackLink","ReactLink","maxW","padding","rounded","marginTop","display","maxWidth","ChallengesPage","selectedChallenge","setSelectedChallenge","yourChallenges","desc","progress","nonStarted","dailyChallenges","monthlyChallenges","allChallenges","mapChallenges","list","className","size","isOpen","Boolean","onClose","colorScheme","mr","flowless","textColor","barColors","PowerConsumptionPerDayChart","chartData","useMemo","i","day","dayData","set","endOf","keys","indexBy","valueFormat","margin","top","right","bottom","left","borderColor","enableLabel","theme","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","GithubContributionsChart","dataForChart","dateMap","processMeasurements","key","substring","entries","kv","emptyColor","colors","minValue","yearSpacing","monthBorderColor","dayBorderWidth","dayBorderColor","itemCount","AppliancePie","colorMap","pieData","device","Math","floor","total","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","scheme","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsSkipAngle","arcLabelsTextColor","modifiers","SpendCard","amount","measurementUnit","goalAmount","bgColor","hideContent","flexDirection","cursor","_hover","base","md","hidden","EnergyIcon","MoneyIcon","ChallengeIcon","enable-background","Dashboard","getTotalUsageByDeiceData","getTotalPowerConsumption","getTotalConsumption","navigate","useNavigate","textAlign","marginBottom","gap","templateRows","templateColumns","colStart","colEnd","rowStart","rowEnd","Number","UsagePerDayChart","HorizontalCard","customText","isAboveAverage","subTitle","AverageList","props","diff","totalSpend","peopleCount","averageSpend","Total","cardData","monthlySpend","ConsumptionPage","monthData","monthlyAverages","App","applianceAverages","sum","getTotalPowerUsageByDeiceData","Provider","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcfeadb8.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nimport { DateTime } from \"luxon\";\r\nimport data from \"./db.json\";\r\n\r\nexport const currentDate = DateTime.now().minus({ years: 1 });\r\nexport const currentMonth = currentDate.startOf(\"month\");\r\n\r\nexport interface Measurement {\r\n  Consumption: string;\r\n  Temp: string;\r\n  FlowTime: string;\r\n  Power_Consumption: string;\r\n  TimeStamp: string;\r\n}\r\n\r\nexport enum Appliance {\r\n  Shower = \"Hydractiva Shower\",\r\n  KitchenFaucet = \"Kitchen Optima Faucet\",\r\n  Faucet = \"Optima Faucet\",\r\n  Dishwasher = \"Dishwasher\",\r\n  WashingMachine = \"Washing Machine\",\r\n}\r\n\r\nexport interface ApartmentData {\r\n  [index: string]: { measurements: Measurement[] } | string;\r\n  people: string;\r\n  [Appliance.Shower]: { measurements: Measurement[] };\r\n  [Appliance.KitchenFaucet]: { measurements: Measurement[] };\r\n  [Appliance.Faucet]: { measurements: Measurement[] };\r\n  [Appliance.Dishwasher]: { measurements: Measurement[] };\r\n  [Appliance.WashingMachine]: { measurements: Measurement[] };\r\n}\r\n\r\nexport interface HouseData {\r\n  apartments: ApartmentData[];\r\n}\r\n\r\nexport interface DataSet {\r\n  houses: HouseData[];\r\n}\r\n\r\nexport const filterData = (data: DataSet, from?: string, to?: string) => {\r\n  const filteredDataSet: DataSet = { houses: [{ apartments: [] }] };\r\n  data.houses[0].apartments.forEach((a) => {\r\n    filteredDataSet.houses[0].apartments.push({\r\n      ...a,\r\n      [Appliance.Shower]: {\r\n        measurements: a[Appliance.Shower].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.KitchenFaucet]: {\r\n        measurements: a[Appliance.KitchenFaucet].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.Faucet]: {\r\n        measurements: a[Appliance.Faucet].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.Dishwasher]: {\r\n        measurements: a[Appliance.Dishwasher].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.WashingMachine]: {\r\n        measurements: a[Appliance.WashingMachine].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n    });\r\n  });\r\n  return filteredDataSet;\r\n};\r\n\r\nconst dataSet = data as unknown as DataSet;\r\nconst filteredDataSet = filterData(dataSet, undefined, currentDate.toString());\r\n\r\nconst DataContext = createContext(filteredDataSet);\r\n\r\nexport default DataContext;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  Appliance,\r\n  currentDate,\r\n  DataSet,\r\n  Measurement,\r\n} from \"../context/DataContext\";\r\nimport { Form, Formik, Field, ErrorMessage } from \"formik\";\r\nimport { sumBy } from \"lodash\";\r\nimport { useContext, useState } from \"react\";\r\nimport GoalContext from \"../context/GoalContext\";\r\nimport { Select } from \"@chakra-ui/select\";\r\nimport { Stack } from \"@chakra-ui/layout\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport {\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n} from \"@chakra-ui/form-control\";\r\n\r\nexport enum GoalType {\r\n  Liters = \"Liters\",\r\n  Money = \"Budget\",\r\n  Power = \"Power\",\r\n}\r\n\r\ninterface MonthlyGoal {\r\n  monthlyGoalType: string;\r\n  monthlyGoalAmount: string;\r\n}\r\n\r\n//In Helsinki, residents pay 1.96 euros per cubic metre of clean drinking water.\r\nconst waterLiterPrice = 1.96 / 1000;\r\n\r\n// Finland Household, kWh price: 0.160 EURO\r\nconst electricityPrice = 0.16;\r\n\r\nconst getAverageHeatingForLiterOfWater = (\r\n  data: DataSet,\r\n  months: number //use data from last N months\r\n) => {\r\n  const myApartmentData = data.houses[0].apartments[0];\r\n  const sumByDevice = Object.values(Appliance).map((appliance) => {\r\n    const myMeasurements = myApartmentData[appliance].measurements.filter(\r\n      (m) =>\r\n        m.TimeStamp >= currentDate.minus({ months }).toString() &&\r\n        m.TimeStamp <= currentDate.toString()\r\n    );\r\n\r\n    return {\r\n      liters: sumBy(myMeasurements, (x) =>\r\n        parseFloat((x as Measurement).Consumption)\r\n      ),\r\n      power: sumBy(myMeasurements, (x) =>\r\n        parseFloat((x as Measurement).Power_Consumption)\r\n      ),\r\n    };\r\n  });\r\n\r\n  const totalPower = sumBy(sumByDevice, (x) => x.power);\r\n  const totalLiters = sumBy(sumByDevice, (x) => x.liters);\r\n\r\n  return totalPower / totalLiters;\r\n};\r\n\r\n// budget needed for litersGOAL = goalLiters * waterLiterPrice  +  average kWh used per liter * goalLiters * kWh price\r\nconst getForecastedBudget = (values: MonthlyGoal, data: DataSet) => {\r\n  const goalLiters = parseInt(values.monthlyGoalAmount);\r\n\r\n  const priceForWater = goalLiters * waterLiterPrice;\r\n  const energyNeededToHeatOneLiter = getAverageHeatingForLiterOfWater(data, 12);\r\n  const priceHeating =\r\n    energyNeededToHeatOneLiter * goalLiters * electricityPrice;\r\n\r\n  return priceForWater + priceHeating;\r\n};\r\n\r\n// priceForOneLiter = average kWh used per liter * kWh price + waterLiterPrice\r\n// liters needed for budgetGOAL = goalMoney / priceForOneLiter\r\nconst getForecastedLiters = (values: MonthlyGoal, data: DataSet) => {\r\n  const goalMoney = parseInt(values.monthlyGoalAmount);\r\n\r\n  const energyNeededToHeatOneLiter = getAverageHeatingForLiterOfWater(data, 12);\r\n  const priceForOneLiter =\r\n    energyNeededToHeatOneLiter * electricityPrice + waterLiterPrice;\r\n\r\n  return goalMoney / priceForOneLiter;\r\n};\r\n\r\nexport const GoalSetter = ({ data }: { data: DataSet }) => {\r\n  const { litersGoal, setLitersGoal, moneyGoal, setMoneyGoal, setPowerGoal } =\r\n    useContext(GoalContext);\r\n\r\n  const [newGoalSet, setNewGoalSet] = useState(false);\r\n\r\n  const handleSubmit = (values: MonthlyGoal, {}) => {\r\n    setNewGoalSet(true);\r\n    if (values.monthlyGoalType === GoalType.Power) {\r\n      localStorage.setItem(GoalType.Power, values.monthlyGoalAmount);\r\n      setPowerGoal(values.monthlyGoalAmount);\r\n    } else if (values.monthlyGoalType === GoalType.Liters) {\r\n      localStorage.setItem(GoalType.Liters, values.monthlyGoalAmount);\r\n      setLitersGoal(values.monthlyGoalAmount);\r\n\r\n      const forecastedMoney = getForecastedBudget(values, data);\r\n      localStorage.setItem(GoalType.Money, forecastedMoney.toFixed(2));\r\n      setMoneyGoal(forecastedMoney.toFixed(2));\r\n    } else if (values.monthlyGoalType === GoalType.Money) {\r\n      localStorage.setItem(GoalType.Money, values.monthlyGoalAmount.toString());\r\n      setMoneyGoal(values.monthlyGoalAmount.toString());\r\n\r\n      const forecastedLiters = getForecastedLiters(values, data);\r\n      localStorage.setItem(GoalType.Liters, forecastedLiters.toFixed(2));\r\n      setLitersGoal(forecastedLiters.toFixed(2));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{\r\n          monthlyGoalType: GoalType.Liters.toString(),\r\n          monthlyGoalAmount: \"4000\",\r\n        }}\r\n        onSubmit={handleSubmit}\r\n        //validate\r\n      >\r\n        {({ values, handleChange, handleBlur }) => (\r\n          <Form>\r\n            <Stack spacing={3}>\r\n              <Select\r\n                name=\"monthlyGoalType\"\r\n                value={values.monthlyGoalType}\r\n                onChange={(values: any) => {\r\n                  setNewGoalSet(false);\r\n                  handleChange(values);\r\n                }}\r\n                onBlur={handleBlur}\r\n                style={{ backgroundColor: \"white\" }}\r\n              >\r\n                <option\r\n                  value={GoalType.Liters.toString()}\r\n                  label={GoalType.Liters.toString()}\r\n                />\r\n                <option\r\n                  value={GoalType.Money.toString()}\r\n                  label={GoalType.Money.toString()}\r\n                />\r\n                <option\r\n                  value={GoalType.Power.toString()}\r\n                  label={GoalType.Power.toString()}\r\n                />\r\n              </Select>\r\n\r\n              <Field name=\"monthlyGoalAmount\">\r\n                {({ field, form }: any) => (\r\n                  <FormControl\r\n                    isInvalid={form.errors.name && form.touched.name}\r\n                  >\r\n                    <Input\r\n                      {...field}\r\n                      id=\"name\"\r\n                      type=\"text\"\r\n                      name=\"monthlyGoalAmount\"\r\n                      style={{ backgroundColor: \"white\" }}\r\n                      onChange={(values: any) => {\r\n                        setNewGoalSet(false);\r\n                        handleChange(values);\r\n                      }}\r\n                    />\r\n                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                  </FormControl>\r\n                )}\r\n              </Field>\r\n\r\n              <ErrorMessage name=\"monthlyGoalAmount\" component=\"div\" />\r\n\r\n              <Button type=\"submit\">Set Goal</Button>\r\n            </Stack>\r\n\r\n            {newGoalSet && values.monthlyGoalType === GoalType.Liters && (\r\n              <div>\r\n                You will spend ~{moneyGoal} EUR on water if you stick to your\r\n                goal!\r\n              </div>\r\n            )}\r\n\r\n            {newGoalSet && values.monthlyGoalType === GoalType.Money && (\r\n              <div>\r\n                You should use less than ~{litersGoal} liters to hit your budget goal!\r\n              </div>\r\n            )}\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import { Appliance, DataSet } from \"./context/DataContext\";\r\n\r\nexport const getAverage = (data: DataSet, appliance: Appliance) =>\r\n  +(\r\n    data.houses[0].apartments.reduce((acc, appartment) => {\r\n      return (\r\n        acc +\r\n        appartment[appliance].measurements.reduce((acc, m) => {\r\n          return (\r\n            acc + parseFloat(m.Consumption) / parseFloat(appartment.people)\r\n          );\r\n        }, 0)\r\n      );\r\n    }, 0) / data.houses[0].apartments.length\r\n  ).toFixed(2);\r\n","import { createContext } from \"react\";\r\n\r\nconst GoalContext = createContext({\r\n  litersGoal: localStorage.getItem(\"Liters\"),\r\n  setLitersGoal: (goal: string) => {\r\n    console.log(goal);\r\n  },\r\n  moneyGoal: localStorage.getItem(\"Money\"),\r\n  setMoneyGoal: (goal: string) => {\r\n    console.log(goal);\r\n  },\r\n  powerGoal: localStorage.getItem(\"Power\"),\r\n  setPowerGoal: (goal: string) => {\r\n    console.log(goal);\r\n  },\r\n});\r\n\r\nexport default GoalContext;\r\n","import { Box, Heading, BoxProps, Text } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/button\";\r\n\r\ninterface ChallengeCardProps extends BoxProps {\r\n  title: string;\r\n  subtext: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const ChallengeCard = ({\r\n  title,\r\n  onClick,\r\n  subtext,\r\n  ...rest\r\n}: ChallengeCardProps) => {\r\n  return (\r\n    <Button onClick={onClick} minHeight=\"80px\">\r\n      <Box p={5} borderWidth=\"0px\" {...rest}>\r\n        <Heading fontSize=\"xl\">{title}</Heading>\r\n        <Text>{subtext}</Text>\r\n      </Box>\r\n    </Button>\r\n  );\r\n};\r\n","export const blueColor = \"#333264\";\r\nexport const lightBlueColor = \"#E4EFFE\";\r\nexport const purpleMainColor = \"#7670FF\";\r\nexport const purpleLightColor = \"#D9D6FD\";\r\nexport const pinkLightColor = \"#FDC7F0\";\r\nexport const yellowLightColor = \"#FFEAD0\";\r\nexport const peachLightColor = \"#FFDED9\";\r\nexport const backgroundColor = \"#FBFDFF\";\r\nexport const mediumGrayColor = \"#e5e5e5\";\r\nexport const lightGreenColor = \"#C7D6B6\";\r\nexport const mediumGreenColor = \"#68BC9F\";\r\nexport const darkGreenColor = \"#3A6B57\";","import { Flex } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { blueColor } from \"../../theme/colors\";\r\n\r\nexport const getAppIcon = (color: string) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    enableBackground=\"new 0 0 24 24\"\r\n    height=\"24px\"\r\n    viewBox=\"0 0 24 24\"\r\n    width=\"24px\"\r\n    fill={color}\r\n  >\r\n    <rect fill=\"none\" height=\"24\" width=\"24\" />\r\n    <path d=\"M12,2c-5.33,4.55-8,8.48-8,11.8c0,4.98,3.8,8.2,8,8.2s8-3.22,8-8.2C20,10.48,17.33,6.55,12,2z M12,20c-3.35,0-6-2.57-6-6.2 c0-2.34,1.95-5.44,6-9.14c4.05,3.7,6,6.79,6,9.14C18,17.43,15.35,20,12,20z M7.83,14c0.37,0,0.67,0.26,0.74,0.62 c0.41,2.22,2.28,2.98,3.64,2.87c0.43-0.02,0.79,0.32,0.79,0.75c0,0.4-0.32,0.73-0.72,0.75c-2.13,0.13-4.62-1.09-5.19-4.12 C7.01,14.42,7.37,14,7.83,14z\" />\r\n  </svg>\r\n);\r\n\r\nexport const WaterIcon = () => {\r\n  return (\r\n    <Flex\r\n      border={`2px solid ${blueColor}`}\r\n      width=\"40px\"\r\n      height=\"40px\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"lg\"\r\n    >\r\n      {getAppIcon(blueColor)}\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  IconButton,\r\n  Box,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport {\r\n  BellIcon,\r\n  CloseIcon,\r\n  HamburgerIcon,\r\n  SettingsIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport { backgroundColor, blueColor, mediumGrayColor } from \"../theme/colors\";\r\n\r\nimport { Image } from \"@chakra-ui/image\";\r\n\r\nimport logo from \"../logo.png\";\r\nimport { getAppIcon } from \"./icons/WaterIcon\";\r\n\r\nexport const MenuBar = () => {\r\n  return (\r\n    <Flex\r\n      alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n      bg={mediumGrayColor}\r\n      w=\"100%\"\r\n      p={4}\r\n      color={blueColor}\r\n      boxShadow=\"md\"\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Flex\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          borderRadius=\"50%\"\r\n          backgroundColor={blueColor}\r\n          height=\"40px\"\r\n          width=\"40px\"\r\n          marginRight=\"16px\"\r\n        >\r\n          {getAppIcon(backgroundColor)}\r\n        </Flex>\r\n        <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n          Flowless\r\n        </Text>\r\n      </Flex>\r\n      <Box>\r\n        <Button bg=\"transparent\" width=\"40px\" marginRight=\"8px\">\r\n          <BellIcon width=\"24px\" height=\"24px\" />\r\n        </Button>\r\n        <Menu>\r\n          <MenuButton\r\n            bg=\"white\"\r\n            as={IconButton}\r\n            aria-label=\"Options\"\r\n            icon={<HamburgerIcon />}\r\n            variant=\"outline\"\r\n          />\r\n          <MenuList boxShadow=\"lg\" color={blueColor}>\r\n            <MenuItem icon={<SettingsIcon />}>Settings</MenuItem>\r\n            <MenuItem icon={<CloseIcon />}>Log Out</MenuItem>\r\n          </MenuList>\r\n        </Menu>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Link } from \"@chakra-ui/layout\";\r\nimport { Link as ReactLink } from \"react-router-dom\";\r\n\r\nexport const BackLink = () => {\r\n  return (\r\n    <Link\r\n      as={ReactLink}\r\n      to=\"/flowless\"\r\n      maxW=\"sm\"\r\n      padding=\"10px 14px 10px 14px\"\r\n      borderWidth=\"1px\"\r\n      rounded=\"md\"\r\n      style={{\r\n        marginTop: \"10px\",\r\n        display: \"block\",\r\n        maxWidth: \"64px\",\r\n      }}\r\n    >\r\n      Back\r\n    </Link>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { Heading, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  ModalFooter,\r\n} from \"@chakra-ui/modal\";\r\nimport { ChallengeCard } from \"../widgets/ChallengeCard\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MenuBar } from \"../components/MenuBar\";\r\nimport { BackLink } from \"../components/BackLink\";\r\n\r\nexport const ChallengesPage = () => {\r\n  const [selectedChallenge, setSelectedChallenge] = useState<string | null>(\r\n    null\r\n  );\r\n\r\n  interface challengeList {\r\n    [index: string]: {\r\n      id: string;\r\n      title: string;\r\n      desc: string;\r\n      progress: string;\r\n      nonStarted: boolean;\r\n    };\r\n  }\r\n\r\n  const yourChallenges: challengeList = {\r\n    \"id-1\": {\r\n      id: \"id-1\",\r\n      title: \"Every Drop Counts\",\r\n      desc: \"Make every single drop count! Use 100 ml less water today in order to successfully pass this challenge.\",\r\n      progress: \"Not started\",\r\n      nonStarted: true,\r\n    },\r\n    \"id-2\": {\r\n      id: \"id-2\",\r\n      title: \"Winter Is Coming\",\r\n      desc: \"The colder the shower, the less energy is wasted. Use 0.1 kWh less today in order to successfully pass this challenge.\",\r\n      progress: \"complete\",\r\n      nonStarted: false,\r\n    },\r\n  };\r\n\r\n  const dailyChallenges: challengeList = {\r\n    \"id-3\": {\r\n      id: \"id-3\",\r\n      title: \"Every Drop Counts\",\r\n      desc: \"Make every single drop count! Use 100 ml less water today in order to successfully pass this challenge.\",\r\n      progress: \"1 out of 10\",\r\n      nonStarted: true,\r\n    },\r\n    \"id-4\": {\r\n      id: \"id-4\",\r\n      title: \"Winter Is Coming\",\r\n      desc: \"The colder the shower, the less energy is wasted. Use 0.1 kWh less today in order to successfully pass this challenge.\",\r\n      progress: \"1 out of 10\",\r\n      nonStarted: false,\r\n    },\r\n  };\r\n\r\n  const monthlyChallenges: challengeList = {\r\n    \"id-6\": {\r\n      id: \"id-6\",\r\n      title: \"Every Tub Counts\",\r\n      desc: \"You should try fast showers instead of long baths! Use 200 litres less this month in order to pass this challenge.\",\r\n      progress: \"1 out of 10\",\r\n      nonStarted: false,\r\n    },\r\n  };\r\n\r\n  const allChallenges = {\r\n    ...yourChallenges,\r\n    ...dailyChallenges,\r\n    ...monthlyChallenges,\r\n  };\r\n\r\n  const mapChallenges = (list: challengeList) => {\r\n    return Object.values(list).map((x) => (\r\n      <ChallengeCard\r\n        onClick={() => setSelectedChallenge(x.id)}\r\n        title={x.title}\r\n        subtext={x.progress}\r\n      />\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MenuBar />\r\n      <div className=\"app\">\r\n        <Heading>Your Challenges</Heading>\r\n        <Stack spacing={8}>{mapChallenges(yourChallenges)}</Stack>\r\n        <Heading>All Challenges</Heading>\r\n        <Heading as=\"h3\" size=\"lg\">\r\n          Daily\r\n        </Heading>\r\n        <Stack spacing={8}>{mapChallenges(dailyChallenges)}</Stack>\r\n        <Heading as=\"h3\" size=\"lg\">\r\n          Monthly\r\n        </Heading>\r\n        <Stack spacing={8}>{mapChallenges(monthlyChallenges)}</Stack>\r\n        <BackLink />\r\n\r\n        <Modal\r\n          isOpen={Boolean(selectedChallenge)}\r\n          onClose={() => setSelectedChallenge(null)}\r\n        >\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>\r\n              {selectedChallenge && allChallenges[selectedChallenge].title}\r\n            </ModalHeader>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              <Text>\r\n                {selectedChallenge && allChallenges[selectedChallenge].desc}\r\n              </Text>\r\n              <Text>\r\n                {selectedChallenge && allChallenges[selectedChallenge].progress}\r\n              </Text>\r\n              {selectedChallenge &&\r\n                allChallenges[selectedChallenge].nonStarted && (\r\n                  <Button colorScheme=\"green\">Start</Button>\r\n                )}\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                mr={3}\r\n                onClick={() => setSelectedChallenge(null)}\r\n              >\r\n                Close\r\n              </Button>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","export const flowless = {\r\n  textColor: \"#03045e\",\r\n};\r\n","import { Heading } from \"@chakra-ui/layout\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport { sumBy } from \"lodash\";\r\nimport { useMemo } from \"react\";\r\nimport { BackLink } from \"../components/BackLink\";\r\nimport { MenuBar } from \"../components/MenuBar\";\r\nimport {\r\n  currentDate,\r\n  DataSet,\r\n  Appliance,\r\n  filterData,\r\n  Measurement,\r\n} from \"../context/DataContext\";\r\nimport { flowless } from \"./theme\";\r\n\r\nconst barColors = {\r\n  [`${Appliance.Dishwasher}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Faucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.KitchenFaucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Shower}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.WashingMachine}Color`]: \"hsl(345, 70%, 50%)\",\r\n};\r\n\r\nexport const PowerConsumptionPerDayChart = ({ data }: { data: DataSet }) => {\r\n  const getPowerConsumptionPerDayData = useMemo(() => {\r\n    const chartData = [];\r\n    for (let i = 1; i <= currentDate.day; i++) {\r\n      const dayData = filterData(\r\n        data,\r\n        currentDate.set({ day: i }).startOf(\"day\").toString(),\r\n        currentDate.set({ day: i }).endOf(\"day\").toString()\r\n      );\r\n      chartData.push({\r\n        day: i,\r\n        [Appliance.Dishwasher]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Dishwasher].measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        [Appliance.Faucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Faucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        [Appliance.KitchenFaucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.KitchenFaucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        [Appliance.Shower]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Shower].measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        [Appliance.WashingMachine]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.WashingMachine]\r\n            .measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        ...barColors,\r\n      });\r\n    }\r\n\r\n    return chartData;\r\n  }, [data]);\r\n\r\n  const chartData = getPowerConsumptionPerDayData;\r\n\r\n  return (\r\n    <>\r\n      <MenuBar />\r\n      <div className=\"app\">\r\n        <div className=\"responsive-chart-wrapper\">\r\n          <Heading as=\"h5\" size=\"sm\">\r\n            Power Consumption Per Day By Device This Month(kWh)\r\n          </Heading>\r\n          <ResponsiveBar\r\n            data={chartData}\r\n            keys={Object.values(Appliance)}\r\n            indexBy=\"day\"\r\n            valueFormat=\">-.2f\"\r\n            margin={{ top: 70, right: 180, bottom: 40, left: 80 }}\r\n            borderColor={{ from: \"color\" }}\r\n            enableLabel={false}\r\n            theme={flowless}\r\n            legends={[\r\n              {\r\n                dataFrom: \"keys\",\r\n                anchor: \"bottom-right\",\r\n                direction: \"column\",\r\n                justify: false,\r\n                translateX: 120,\r\n                translateY: 0,\r\n                itemsSpacing: 2,\r\n                itemWidth: 100,\r\n                itemHeight: 20,\r\n                itemDirection: \"left-to-right\",\r\n                itemOpacity: 0.85,\r\n                symbolSize: 20,\r\n                effects: [\r\n                  {\r\n                    on: \"hover\",\r\n                    style: {\r\n                      itemOpacity: 1,\r\n                    },\r\n                  },\r\n                ],\r\n              },\r\n            ]}\r\n          />\r\n\r\n          <BackLink />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { Heading } from \"@chakra-ui/layout\";\r\nimport { ResponsiveCalendar } from \"@nivo/calendar\";\r\nimport { useMemo } from \"react\";\r\nimport { Appliance, DataSet, Measurement } from \"../context/DataContext\";\r\nimport { flowless } from \"./theme\";\r\n\r\nexport const GithubContributionsChart = ({ data }: { data: DataSet }) => {\r\n  const dataForChart = useMemo(() => {\r\n    const dateMap: { [index: string]: number } = {};\r\n\r\n    const processMeasurements = (x: Measurement) => {\r\n      const key = x.TimeStamp.substring(0, 10);\r\n      const value = dateMap[key];\r\n      if (value) {\r\n        dateMap[key] = value + parseFloat(x.Consumption);\r\n      } else {\r\n        dateMap[key] = parseFloat(x.Consumption);\r\n      }\r\n    };\r\n\r\n    data.houses[0].apartments[0][Appliance.Dishwasher].measurements.forEach(\r\n      processMeasurements\r\n    );\r\n    data.houses[0].apartments[0][Appliance.KitchenFaucet].measurements.forEach(\r\n      processMeasurements\r\n    );\r\n    data.houses[0].apartments[0][Appliance.Faucet].measurements.forEach(\r\n      processMeasurements\r\n    );\r\n    data.houses[0].apartments[0][Appliance.WashingMachine].measurements.forEach(\r\n      processMeasurements\r\n    );\r\n    data.houses[0].apartments[0][Appliance.Shower].measurements.forEach(\r\n      processMeasurements\r\n    );\r\n\r\n    return Object.entries(dateMap).map((kv) => ({\r\n      day: kv[0],\r\n      value: +kv[1].toFixed(2),\r\n    }));\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"responsive-chart-wrapper\" style={{ height: 250 }}>\r\n      <Heading as=\"h5\" size=\"sm\">\r\n        Consumptions by Day in 2020 in Liters\r\n      </Heading>\r\n      <ResponsiveCalendar\r\n        data={dataForChart}\r\n        from=\"2020-01-01\"\r\n        to=\"2020-12-31\"\r\n        emptyColor=\"#eeeeee\"\r\n        colors={[\"#61cdbb\", \"#97e3d5\", \"#e8c1a0\", \"#f47560\"]}\r\n        minValue={0}\r\n        margin={{ top: 20, right: 40, bottom: 20, left: 20 }}\r\n        yearSpacing={40}\r\n        monthBorderColor=\"#ffffff\"\r\n        dayBorderWidth={2}\r\n        dayBorderColor=\"#ffffff\"\r\n        theme={flowless}\r\n        legends={[\r\n          {\r\n            anchor: \"bottom-right\",\r\n            direction: \"row\",\r\n            translateY: 36,\r\n            itemCount: 4,\r\n            itemWidth: 42,\r\n            itemHeight: 36,\r\n            itemsSpacing: 14,\r\n            itemDirection: \"right-to-left\",\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { ResponsivePie } from \"@nivo/pie\";\r\nimport { useMemo } from \"react\";\r\nimport { Heading } from \"@chakra-ui/layout\";\r\n\r\nimport { flowless } from \"./theme\";\r\nimport { Appliance } from \"../context/DataContext\";\r\n\r\ninterface AppliancePieProps {\r\n  data: {\r\n    device: Appliance;\r\n    total: number;\r\n  }[];\r\n}\r\n\r\nexport const AppliancePie = ({ data }: AppliancePieProps) => {\r\n  const colorMap = {\r\n    [Appliance.Dishwasher]: \"hsl(220, 70%, 50%)\",\r\n    [Appliance.Faucet]: \"hsl(1, 70%, 50%)\",\r\n    [Appliance.KitchenFaucet]: \"hsl(194, 70%, 50%)\",\r\n    [Appliance.Shower]: \"hsl(284, 70%, 50%)\",\r\n    [Appliance.WashingMachine]: \"hsl(156, 70%, 50%)\",\r\n  };\r\n\r\n  const pieData = useMemo(() => {\r\n    return data.map((x) => ({\r\n      id: x.device,\r\n      label: x.device,\r\n      value: Math.floor(x.total),\r\n      color: colorMap[x.device],\r\n    }));\r\n  }, [data.length]);\r\n\r\n  return (\r\n    <div className=\"responsive-chart-wrapper\">\r\n      <Heading as=\"h5\" size=\"sm\">\r\n        Your Water Consumption This Month In Liters\r\n      </Heading>\r\n      <ResponsivePie\r\n        data={pieData}\r\n        margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\r\n        innerRadius={0.5}\r\n        padAngle={0.7}\r\n        cornerRadius={3}\r\n        activeOuterRadiusOffset={8}\r\n        colors={{ scheme: \"nivo\" }}\r\n        theme={flowless}\r\n        borderWidth={1}\r\n        borderColor={{ from: \"color\" }}\r\n        arcLinkLabelsSkipAngle={10}\r\n        arcLinkLabelsTextColor=\"#333333\"\r\n        arcLinkLabelsThickness={2}\r\n        arcLinkLabelsColor={{ from: \"color\" }}\r\n        arcLabelsSkipAngle={10}\r\n        arcLabelsTextColor={{ from: \"color\", modifiers: [[\"brighter\", 2]] }}\r\n        valueFormat=\" >-.2f\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Box, Heading, Text, Flex } from \"@chakra-ui/layout\";\r\nimport { blueColor, mediumGrayColor } from \"../theme/colors\";\r\n\r\ninterface SpendCardProps {\r\n  amount: number;\r\n  measurementUnit: string;\r\n  title: string;\r\n  goalAmount: number;\r\n  icon?: React.ReactNode;\r\n  textColor?: string;\r\n  bgColor?: string;\r\n  hideContent?: boolean;\r\n  onClick?: () => any;\r\n}\r\n\r\nexport const SpendCard = ({\r\n  amount,\r\n  measurementUnit,\r\n  goalAmount,\r\n  title,\r\n  icon,\r\n  textColor,\r\n  bgColor,\r\n  hideContent,\r\n  onClick,\r\n}: SpendCardProps) => {\r\n  return (\r\n    <Flex\r\n      height=\"100%\"\r\n      justifyContent=\"space-between\"\r\n      boxShadow=\"base\"\r\n      flexDirection=\"column\"\r\n      borderRadius=\"lg\"\r\n      bg={bgColor || mediumGrayColor}\r\n      color={textColor || blueColor}\r\n      padding=\"16px\"\r\n      onClick={onClick}\r\n      cursor=\"pointer\"\r\n      _hover={{ bg: \"gray.300\" }}\r\n    >\r\n      <Box>\r\n        {icon && icon}\r\n        <Heading as=\"h2\" fontSize={{ base: \"sm\", md: \"md\" }} margin=\"16px 0\">\r\n          {title}\r\n        </Heading>\r\n      </Box>\r\n      <Box hidden={hideContent}>\r\n        <Text fontSize={{ base: \"xl\", md: \"4xl\" }} fontWeight=\"regular\">\r\n          {amount} {measurementUnit}\r\n        </Text>\r\n      </Box>\r\n      <Box marginTop=\"32px\" hidden={hideContent}>\r\n        {goalAmount ? (\r\n          <>\r\n            <Text fontSize=\"sm\" fontWeight=\"regular\" display=\"inline\">\r\n              {`out of `}\r\n            </Text>\r\n            <Text fontSize=\"sm\" fontWeight=\"bold\" display=\"inline\">\r\n              {`${goalAmount} ${measurementUnit}`}\r\n            </Text>\r\n            <br />\r\n            <Text fontSize=\"sm\" fontWeight=\"regular\">\r\n              which is your set goal\r\n            </Text>\r\n          </>\r\n        ) : (\r\n          <Text fontSize=\"sm\" fontWeight=\"regular\">\r\n            No goal set\r\n          </Text>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Flex } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { blueColor } from \"../../theme/colors\";\r\n\r\nexport const EnergyIcon = () => {\r\n  return (\r\n    <Flex\r\n      border={`2px solid ${blueColor}`}\r\n      width=\"40px\"\r\n      height=\"40px\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"lg\"\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        enableBackground=\"new 0 0 24 24\"\r\n        height=\"24px\"\r\n        viewBox=\"0 0 24 24\"\r\n        width=\"24px\"\r\n        fill={blueColor}\r\n      >\r\n        <g>\r\n          <rect fill=\"none\" height=\"24\" width=\"24\" />\r\n        </g>\r\n        <g>\r\n          <path d=\"M11,21h-1l1-7H7.5c-0.88,0-0.33-0.75-0.31-0.78C8.48,10.94,10.42,7.54,13.01,3h1l-1,7h3.51c0.4,0,0.62,0.19,0.4,0.66 C12.97,17.55,11,21,11,21z\" />\r\n        </g>\r\n      </svg>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Flex } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { blueColor } from \"../../theme/colors\";\r\n\r\nexport const MoneyIcon = () => {\r\n  return (\r\n    <Flex\r\n      border={`2px solid ${blueColor}`}\r\n      width=\"40px\"\r\n      height=\"40px\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"lg\"\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        height=\"24px\"\r\n        viewBox=\"0 0 24 24\"\r\n        width=\"24px\"\r\n        fill={blueColor}\r\n      >\r\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n        <path d=\"M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z\" />\r\n      </svg>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Flex } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { blueColor } from \"../../theme/colors\";\r\n\r\nexport const ChallengeIcon = () => {\r\n  return (\r\n    <Flex\r\n      border={`2px solid ${blueColor}`}\r\n      width=\"40px\"\r\n      height=\"40px\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"lg\"\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        enable-background=\"new 0 0 24 24\"\r\n        height=\"24px\"\r\n        viewBox=\"0 0 24 24\"\r\n        width=\"24px\"\r\n        fill={blueColor}\r\n      >\r\n        <rect fill=\"none\" height=\"24\" width=\"24\" />\r\n        <path d=\"M19,5h-2V3H7v2H5C3.9,5,3,5.9,3,7v1c0,2.55,1.92,4.63,4.39,4.94c0.63,1.5,1.98,2.63,3.61,2.96V19H7v2h10v-2h-4v-3.1 c1.63-0.33,2.98-1.46,3.61-2.96C19.08,12.63,21,10.55,21,8V7C21,5.9,20.1,5,19,5z M5,8V7h2v3.82C5.84,10.4,5,9.3,5,8z M12,14 c-1.65,0-3-1.35-3-3V5h6v6C15,12.65,13.65,14,12,14z M19,8c0,1.3-0.84,2.4-2,2.82V7h2V8z\" />\r\n      </svg>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Box, Flex, Grid, GridItem, Heading } from \"@chakra-ui/layout\";\r\nimport { useContext } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { GithubContributionsChart } from \"../charts/GithubContributionsChart\";\r\nimport { GoalSetter } from \"../components/GoalSetter\";\r\nimport { WaterIcon } from \"../components/icons/WaterIcon\";\r\nimport { MenuBar } from \"../components/MenuBar\";\r\nimport { DataSet } from \"../context/DataContext\";\r\nimport GoalContext from \"../context/GoalContext\";\r\nimport { blueColor, mediumGrayColor } from \"../theme/colors\";\r\nimport { AppliancePie } from \"../charts/AppliancePie\";\r\nimport { SpendCard } from \"../widgets/SpendCard\";\r\nimport { EnergyIcon } from \"../components/icons/EnergyIcon\";\r\nimport { MoneyIcon } from \"../components/icons/MoneyIcon\";\r\nimport { ChallengeIcon } from \"../components/icons/ChallengeIcon\";\r\n\r\nexport const Dashboard = ({\r\n  data,\r\n  getTotalUsageByDeiceData,\r\n  getTotalPowerConsumption,\r\n  getTotalConsumption,\r\n}: {\r\n  data: DataSet;\r\n  getTotalUsageByDeiceData: any;\r\n  getTotalPowerConsumption: any;\r\n  getTotalConsumption: any;\r\n}) => {\r\n  const { litersGoal, powerGoal, moneyGoal } = useContext(GoalContext);\r\n  const navigate = useNavigate();\r\n  return (\r\n    <>\r\n      <MenuBar />\r\n      <div className=\"app\">\r\n        {/* До́брый ве́чер ( ͡° ͜ʖ ͡°) */}\r\n        <Heading textAlign=\"left\" as=\"h1\" size=\"xl\" marginBottom=\"32px\">\r\n          Dashboard\r\n        </Heading>\r\n        <div className=\"dashboard-wrapper\">\r\n          <div className=\"flex-bigger\">\r\n            {/* <TotalUsageByDeviceChart data={getTotalUsageByDeiceData} /> */}\r\n            <AppliancePie data={getTotalUsageByDeiceData} />\r\n            <GithubContributionsChart data={data} />\r\n          </div>\r\n          <div className=\"flex-small\">\r\n            <Grid\r\n              gap={4}\r\n              templateRows=\"repeat(6, 1fr)\"\r\n              templateColumns=\"repeat(2, 1fr)\"\r\n            >\r\n              <GridItem colStart={2} colEnd={2} rowStart={1} rowEnd={4}>\r\n                <Flex\r\n                  height=\"100%\"\r\n                  justifyContent=\"space-between\"\r\n                  boxShadow=\"base\"\r\n                  flexDirection=\"column\"\r\n                  borderRadius=\"lg\"\r\n                  bg={mediumGrayColor}\r\n                  color={blueColor}\r\n                  padding=\"16px\"\r\n                >\r\n                  <Box>\r\n                    <Heading\r\n                      as=\"h2\"\r\n                      fontSize={{ base: \"sm\", md: \"md\" }}\r\n                      margin=\"16px 0\"\r\n                    >\r\n                      Set your monthly consumption goals\r\n                    </Heading>\r\n                  </Box>\r\n                  <GoalSetter data={data} />\r\n                </Flex>\r\n              </GridItem>\r\n\r\n              <GridItem colStart={1} colEnd={2} rowStart={1} rowEnd={5}>\r\n                <SpendCard\r\n                  icon={<WaterIcon />}\r\n                  title=\"Water Consumption\"\r\n                  amount={getTotalConsumption}\r\n                  measurementUnit=\"liters\"\r\n                  goalAmount={Number(litersGoal)}\r\n                  bgColor={mediumGrayColor}\r\n                  textColor={blueColor}\r\n                  onClick={() => navigate(\"/flowless/consumption\")}\r\n                />\r\n              </GridItem>\r\n              <GridItem colStart={2} colEnd={3} rowStart={4} rowEnd={7}>\r\n                <SpendCard\r\n                  icon={<EnergyIcon />}\r\n                  title=\"Energy and Sustainability\"\r\n                  amount={getTotalPowerConsumption}\r\n                  measurementUnit=\"kWh\"\r\n                  goalAmount={Number(powerGoal)}\r\n                  bgColor={mediumGrayColor}\r\n                  textColor={blueColor}\r\n                  onClick={() => navigate(\"/flowless/power\")}\r\n                />\r\n              </GridItem>\r\n              <GridItem colStart={1} colEnd={2} rowStart={5} rowEnd={9}>\r\n                <SpendCard\r\n                  icon={<MoneyIcon />}\r\n                  title=\"Spend\"\r\n                  amount={22}\r\n                  measurementUnit=\"EUR\"\r\n                  goalAmount={Number(moneyGoal)}\r\n                  bgColor={mediumGrayColor}\r\n                  textColor={blueColor}\r\n                  onClick={() => navigate(\"/flowless/spend\")}\r\n                />\r\n              </GridItem>\r\n              <GridItem colStart={2} colEnd={3} rowStart={7} rowEnd={9}>\r\n                <SpendCard\r\n                  icon={<ChallengeIcon />}\r\n                  title=\"Challenges\"\r\n                  amount={getTotalConsumption}\r\n                  measurementUnit=\"liters\"\r\n                  goalAmount={120}\r\n                  bgColor={mediumGrayColor}\r\n                  textColor={blueColor}\r\n                  hideContent={true}\r\n                  onClick={() => navigate(\"/flowless/challenges\")}\r\n                />\r\n              </GridItem>\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { Heading } from \"@chakra-ui/layout\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport { sumBy } from \"lodash\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  currentDate,\r\n  DataSet,\r\n  Appliance,\r\n  filterData,\r\n  Measurement,\r\n} from \"../context/DataContext\";\r\nimport { flowless } from \"./theme\";\r\n\r\nconst barColors = {\r\n  [`${Appliance.Dishwasher}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Faucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.KitchenFaucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Shower}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.WashingMachine}Color`]: \"hsl(345, 70%, 50%)\",\r\n};\r\n\r\nexport const UsagePerDayChart = ({ data }: { data: DataSet }) => {\r\n  const getUsagePerDayData = useMemo(() => {\r\n    const chartData = [];\r\n    for (let i = 1; i <= currentDate.day; i++) {\r\n      const dayData = filterData(\r\n        data,\r\n        currentDate.set({ day: i }).startOf(\"day\").toString(),\r\n        currentDate.set({ day: i }).endOf(\"day\").toString()\r\n      );\r\n      chartData.push({\r\n        day: i,\r\n        [Appliance.Dishwasher]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Dishwasher].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.Faucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Faucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.KitchenFaucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.KitchenFaucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.Shower]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Shower].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.WashingMachine]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.WashingMachine]\r\n            .measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        ...barColors,\r\n      });\r\n    }\r\n\r\n    return chartData;\r\n  }, [data]);\r\n\r\n  const chartData = getUsagePerDayData;\r\n\r\n  return (\r\n    <div className=\"responsive-chart-wrapper\">\r\n      <Heading as=\"h5\" size=\"sm\">\r\n        Consumption Per Day By Device This Month\r\n      </Heading>\r\n      <ResponsiveBar\r\n        data={chartData}\r\n        keys={Object.values(Appliance)}\r\n        indexBy=\"day\"\r\n        valueFormat=\">-.2f\"\r\n        margin={{ top: 70, right: 180, bottom: 40, left: 80 }}\r\n        borderColor={{ from: \"color\" }}\r\n        enableLabel={false}\r\n        theme={flowless}\r\n        legends={[\r\n          {\r\n            dataFrom: \"keys\",\r\n            anchor: \"bottom-right\",\r\n            direction: \"column\",\r\n            justify: false,\r\n            translateX: 120,\r\n            translateY: 0,\r\n            itemsSpacing: 2,\r\n            itemWidth: 100,\r\n            itemHeight: 20,\r\n            itemDirection: \"left-to-right\",\r\n            itemOpacity: 0.85,\r\n            symbolSize: 20,\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemOpacity: 1,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Box, Heading, Text, Flex } from \"@chakra-ui/layout\";\r\nimport { blueColor, mediumGrayColor } from \"../theme/colors\";\r\n\r\ninterface SpendCardProps {\r\n  amount: number;\r\n  measurementUnit: string;\r\n  title?: string;\r\n  icon?: React.ReactNode;\r\n  textColor?: string;\r\n  bgColor?: string;\r\n  hideContent?: boolean;\r\n  customText: string;\r\n  isAboveAverage?: boolean;\r\n  subTitle?: string;\r\n}\r\n\r\nexport const HorizontalCard = ({\r\n  amount,\r\n  measurementUnit,\r\n  title,\r\n  icon,\r\n  textColor,\r\n  bgColor,\r\n  hideContent,\r\n  customText,\r\n  isAboveAverage,\r\n  subTitle,\r\n}: SpendCardProps) => {\r\n  return (\r\n    <Flex\r\n      height=\"100%\"\r\n      justifyContent=\"space-between\"\r\n      boxShadow=\"base\"\r\n      flexDirection=\"column\"\r\n      borderRadius=\"lg\"\r\n      bg={bgColor || mediumGrayColor}\r\n      color={textColor || blueColor}\r\n      padding=\"16px\"\r\n    >\r\n      <Box>\r\n        {icon && icon}\r\n        <Text fontSize=\"sm\" fontWeight=\"medium\">\r\n          {customText}\r\n        </Text>\r\n      </Box>\r\n      <Box margin=\"18px 0 8px\">\r\n        {title && (\r\n          <>\r\n            <Heading as=\"h2\" fontSize={{ base: \"lg\", md: \"xl\" }}>\r\n              {title}\r\n            </Heading>\r\n            <Text fontSize=\"sm\" fontWeight=\"medium\" display=\"inline\">\r\n              {subTitle}\r\n            </Text>\r\n          </>\r\n        )}\r\n        <Text fontSize={{ base: \"xl\", md: \"4xl\" }} fontWeight=\"regular\">\r\n          {amount} {measurementUnit}\r\n        </Text>\r\n      </Box>\r\n      <Box hidden={hideContent}>\r\n        <Text fontSize=\"sm\" fontWeight=\"medium\" display=\"inline\">\r\n          {`${isAboveAverage ? \"above\" : \"below\"} the global average`}\r\n        </Text>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Grid, GridItem } from \"@chakra-ui/react\";\r\nimport { Appliance } from \"../context/DataContext\";\r\nimport { HorizontalCard } from \"./HorizontalCard\";\r\n\r\nexport interface AverageSpend {\r\n  [Appliance.Dishwasher]: number;\r\n  [Appliance.Faucet]: number;\r\n  [Appliance.KitchenFaucet]: number;\r\n  [Appliance.Shower]: number;\r\n  [Appliance.WashingMachine]: number;\r\n  Total: number;\r\n}\r\n\r\nconst AverageList = (props: {\r\n  monthlySpend: { total: number; device: Appliance }[];\r\n  averageSpend: AverageSpend;\r\n  totalSpend: number;\r\n  peopleCount: number;\r\n}) => {\r\n  const diff = props.totalSpend / props.peopleCount - props.averageSpend.Total;\r\n  const isAboveAverage = diff > 0;\r\n  const cardData = props.monthlySpend.map((data) => {\r\n    const diff =\r\n      data.total / props.peopleCount - props.averageSpend[data.device];\r\n    const isAboveAverage = diff > 0;\r\n    return { diff, isAboveAverage, device: data.device };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        margin=\"64px 0\"\r\n        gap={4}\r\n        templateRows=\"repeat(3, 1fr)\"\r\n        templateColumns=\"repeat(2, 1fr)\"\r\n      >\r\n        <GridItem colStart={1} colEnd={2} rowStart={1} rowEnd={2}>\r\n          <HorizontalCard\r\n            customText=\"Current total water spend per person this month is\"\r\n            measurementUnit=\"liters\"\r\n            amount={isAboveAverage ? +diff.toFixed(2) : +(-diff).toFixed(2)}\r\n            isAboveAverage={isAboveAverage}\r\n          />\r\n        </GridItem>\r\n\r\n        <GridItem colStart={2} colEnd={3} rowStart={1} rowEnd={2}>\r\n          <HorizontalCard\r\n            customText=\"Current total water spend per person with your\"\r\n            measurementUnit=\"liters\"\r\n            amount={+cardData[0].diff.toFixed(2)}\r\n            isAboveAverage={cardData[0].isAboveAverage}\r\n            title={cardData[0].device}\r\n            subTitle=\"this month is\"\r\n          />\r\n        </GridItem>\r\n        <GridItem colStart={2} colEnd={3} rowStart={2} rowEnd={3}>\r\n          <HorizontalCard\r\n            customText=\"Current total water spend per person with your\"\r\n            measurementUnit=\"liters\"\r\n            amount={+cardData[1].diff.toFixed(2)}\r\n            isAboveAverage={cardData[1].isAboveAverage}\r\n            title={cardData[1].device}\r\n            subTitle=\"this month is\"\r\n          />\r\n        </GridItem>\r\n\r\n        <GridItem colStart={1} colEnd={2} rowStart={3} rowEnd={4}>\r\n          <HorizontalCard\r\n            customText=\"Current total water spend per person with your\"\r\n            measurementUnit=\"liters\"\r\n            amount={+cardData[2].diff.toFixed(2)}\r\n            isAboveAverage={cardData[2].isAboveAverage}\r\n            title={cardData[2].device}\r\n            subTitle=\"this month is\"\r\n          />\r\n        </GridItem>\r\n        <GridItem colStart={2} colEnd={3} rowStart={3} rowEnd={4}>\r\n          <HorizontalCard\r\n            customText=\"Current total water spend per person with your\"\r\n            measurementUnit=\"liters\"\r\n            amount={+cardData[3].diff.toFixed(2)}\r\n            isAboveAverage={cardData[3].isAboveAverage}\r\n            title={cardData[3].device}\r\n            subTitle=\"this month is\"\r\n          />\r\n        </GridItem>\r\n\r\n        <GridItem colStart={1} colEnd={2} rowStart={2} rowEnd={3}>\r\n          <HorizontalCard\r\n            customText=\"Current total water spend per person with your\"\r\n            measurementUnit=\"liters\"\r\n            amount={+cardData[4].diff.toFixed(2)}\r\n            isAboveAverage={cardData[4].isAboveAverage}\r\n            title={cardData[4].device}\r\n            subTitle=\"this month is\"\r\n          />\r\n        </GridItem>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AverageList;\r\n","import { Link } from \"react-router-dom\";\r\nimport { UsagePerDayChart } from \"../charts/UsagePerDayChart\";\r\nimport { BackLink } from \"../components/BackLink\";\r\nimport { MenuBar } from \"../components/MenuBar\";\r\nimport { DataSet } from \"../context/DataContext\";\r\nimport AverageList from \"../widgets/AverageList\";\r\n\r\nexport const ConsumptionPage = ({\r\n  data,\r\n  getTotalUsageByDeiceData,\r\n  getTotalConsumption,\r\n  monthData,\r\n  monthlyAverages,\r\n}: {\r\n  data: DataSet;\r\n  getTotalUsageByDeiceData: any;\r\n  getTotalConsumption: any;\r\n  monthData: any;\r\n  monthlyAverages: any;\r\n}) => {\r\n  return (\r\n    <>\r\n      <MenuBar />\r\n      <div className=\"app\">\r\n        <UsagePerDayChart data={monthData} />\r\n        <AverageList\r\n          monthlySpend={getTotalUsageByDeiceData}\r\n          averageSpend={monthlyAverages}\r\n          totalSpend={getTotalConsumption}\r\n          peopleCount={parseFloat(data.houses[0].apartments[0].people)}\r\n        />\r\n        <BackLink />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { ChakraProvider } from \"@chakra-ui/react\";\r\nimport React, { useContext, useMemo, useState } from \"react\";\r\nimport sumBy from \"lodash/sumBy\";\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\nimport DataContext, { currentDate, filterData } from \"./context/DataContext\";\r\nimport { currentMonth, Appliance, Measurement } from \"./context/DataContext\";\r\nimport { getAverage } from \"./utils\";\r\nimport { sum } from \"lodash\";\r\nimport { GoalType } from \"./components/GoalSetter\";\r\nimport { ChallengesPage } from \"./pages/ChallengesPage\";\r\nimport GoalContext from \"./context/GoalContext\";\r\nimport { PowerConsumptionPerDayChart } from \"./charts/PowerConsuptionPerDayChart\";\r\nimport { Dashboard } from \"./pages/Dashboard\";\r\nimport { ConsumptionPage } from \"./pages/ConsumptionPage\";\r\nimport { AverageSpend } from \"./widgets/AverageList\";\r\n\r\nfunction App() {\r\n  const [litersGoal, setLitersGoal] = useState(\r\n    localStorage.getItem(GoalType.Liters)\r\n  );\r\n  const [moneyGoal, setMoneyGoal] = useState(\r\n    localStorage.getItem(GoalType.Money)\r\n  );\r\n  const [powerGoal, setPowerGoal] = useState(\r\n    localStorage.getItem(GoalType.Power)\r\n  );\r\n  const data = useContext(DataContext);\r\n\r\n  const monthData = useMemo(() => {\r\n    return filterData(\r\n      data,\r\n      currentDate.startOf(\"month\").toString(),\r\n      currentDate.endOf(\"month\").toString()\r\n    );\r\n  }, [data]);\r\n\r\n  const applianceAverages = {\r\n    [Appliance.Dishwasher]: getAverage(monthData, Appliance.Dishwasher),\r\n    [Appliance.Faucet]: getAverage(monthData, Appliance.Faucet),\r\n    [Appliance.KitchenFaucet]: getAverage(monthData, Appliance.KitchenFaucet),\r\n    [Appliance.Shower]: getAverage(monthData, Appliance.Shower),\r\n    [Appliance.WashingMachine]: getAverage(monthData, Appliance.WashingMachine),\r\n  };\r\n  const monthlyAverages = {\r\n    ...applianceAverages,\r\n    Total: sum(Object.values(applianceAverages)),\r\n  } as AverageSpend;\r\n\r\n  const getTotalUsageByDeiceData = useMemo(() => {\r\n    //USE THE FIRST ONE\r\n    const myApartmentData = data.houses[0].apartments[0];\r\n\r\n    const summedData = Object.values(Appliance).map((device) => {\r\n      const myMeasurements = myApartmentData[device].measurements.filter(\r\n        (m) => m.TimeStamp >= currentMonth.toString()\r\n      );\r\n      return {\r\n        device,\r\n        total: sumBy(myMeasurements, (x) =>\r\n          parseFloat((x as Measurement).Consumption)\r\n        ),\r\n      };\r\n    });\r\n\r\n    return summedData;\r\n  }, [data.houses]);\r\n\r\n  const getTotalPowerUsageByDeiceData = useMemo(() => {\r\n    //USE THE FIRST ONE\r\n    const myApartmentData = data.houses[0].apartments[0];\r\n\r\n    const summedData = Object.values(Appliance).map((device) => {\r\n      const myMeasurements = myApartmentData[device].measurements.filter(\r\n        (m) => m.TimeStamp >= currentMonth.toString()\r\n      );\r\n      return {\r\n        device,\r\n        total: sumBy(myMeasurements, (x) =>\r\n          parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n      };\r\n    });\r\n\r\n    return summedData;\r\n  }, [data.houses]);\r\n\r\n  const getTotalConsumption = useMemo(() => {\r\n    return Math.floor(sumBy(getTotalUsageByDeiceData, (x) => x.total));\r\n  }, [getTotalUsageByDeiceData]);\r\n\r\n  const getTotalPowerConsumption = useMemo(() => {\r\n    return Math.floor(sumBy(getTotalPowerUsageByDeiceData, (x) => x.total));\r\n  }, [getTotalPowerUsageByDeiceData]);\r\n\r\n  return (\r\n    <GoalContext.Provider\r\n      value={{\r\n        litersGoal,\r\n        setLitersGoal,\r\n        moneyGoal,\r\n        setMoneyGoal,\r\n        powerGoal,\r\n        setPowerGoal,\r\n      }}\r\n    >\r\n      <ChakraProvider>\r\n        <BrowserRouter>\r\n          <Routes>\r\n            <Route\r\n              path=\"flowless\"\r\n              element={\r\n                <Dashboard\r\n                  data={data}\r\n                  getTotalConsumption={getTotalConsumption}\r\n                  getTotalPowerConsumption={getTotalPowerConsumption}\r\n                  getTotalUsageByDeiceData={getTotalUsageByDeiceData}\r\n                />\r\n              }\r\n            />\r\n            <Route\r\n              path=\"flowless/consumption\"\r\n              element={\r\n                <ConsumptionPage\r\n                  data={data}\r\n                  getTotalConsumption={getTotalConsumption}\r\n                  getTotalUsageByDeiceData={getTotalUsageByDeiceData}\r\n                  monthData={monthData}\r\n                  monthlyAverages={monthlyAverages}\r\n                />\r\n              }\r\n            />\r\n            <Route\r\n              path=\"flowless/power\"\r\n              element={<PowerConsumptionPerDayChart data={monthData} />}\r\n            />\r\n            <Route path=\"flowless/challenges\" element={<ChallengesPage />} />\r\n            <Route path=\"flowless/spend\" element={<div>( ͡° ͜ʖ ͡°)</div>} />\r\n          </Routes>\r\n        </BrowserRouter>\r\n      </ChakraProvider>\r\n    </GoalContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}