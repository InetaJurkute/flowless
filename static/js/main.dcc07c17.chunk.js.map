{"version":3,"sources":["context/DataContext.tsx","components/GoalSetter.tsx","TotalUsageByDeviceChart.tsx","charts/UsagePerDayChart.tsx","components/MenuCategoryStrip.tsx","context/GoalContext.tsx","widgets/SpendCard.tsx","utils.tsx","widgets/AverageList.tsx","App.tsx","widgets/ChallengeCard.tsx","pages/ChallengesPage.tsx","reportWebVitals.ts","index.tsx"],"names":["Appliance","currentDate","DateTime","now","minus","years","currentMonth","startOf","GoalType","filterData","data","from","to","filteredDataSet","houses","apartments","forEach","a","push","Shower","measurements","filter","m","TimeStamp","KitchenFaucet","Faucet","Dishwasher","WashingMachine","undefined","toString","DataContext","createContext","TotalUsageByDeviceChart","className","keys","indexBy","valueFormat","margin","top","right","bottom","left","borderColor","gridLabelOffset","dotSize","dotColor","theme","dotBorderWidth","colors","scheme","blendMode","motionConfig","legends","anchor","direction","translateX","translateY","itemWidth","itemHeight","itemTextColor","symbolSize","symbolShape","effects","on","style","barColors","UsagePerDayChart","chartData","useMemo","i","day","dayData","set","endOf","sumBy","x","parseFloat","Consumption","Object","values","enableLabel","dataFrom","justify","itemsSpacing","itemDirection","itemOpacity","MenuCategoryStrip","categories","activeCategory","setActiveCategory","categoryButtons","map","category","index","onClick","onCategoryClick","backgroundColor","GoalContext","goal","localStorage","getItem","setGoal","console","log","SpendCard","amount","useContext","maxW","borderWidth","borderRadius","overflow","p","bg","as","size","display","fontSize","getAverage","appliance","reduce","acc","appartment","people","length","toFixed","AverageList","props","diff","totalSpend","peopleCount","averageSpend","Total","monthlySpend","total","device","MenuCategory","GoalSetter","initialValues","monthlyGoalType","Liters","monthlyGoalAmount","onSubmit","setItem","litersFromMoney","Math","random","handleChange","handleBlur","name","value","onChange","onBlur","label","Money","type","component","ChallengeCard","title","subtext","rest","shadow","ChallengesPage","useState","selectedChallenge","setSelectedChallenge","yourChallenges","id","desc","progress","nonStarted","dailyChallenges","monthlyChallenges","allChallenges","mapChallenges","list","spacing","isOpen","Boolean","onClose","colorScheme","mr","App","monthData","applianceAverages","monthlyAverages","sum","getTotalUsageByDeiceData","myApartmentData","myMeasurements","getTotalConsumption","floor","Provider","Challenges","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcc07c17.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport { DateTime } from \"luxon\";\nimport data from \"./db.json\";\n\nexport const currentDate = DateTime.now().minus({ years: 1 });\nexport const currentMonth = currentDate.startOf(\"month\");\n\nexport interface Measurement {\n  Consumption: string;\n  Temp: string;\n  FlowTime: string;\n  PowerConsumption: string;\n  TimeStamp: string;\n}\n\nexport enum Appliance {\n  Shower = \"Hydractiva_shower\",\n  KitchenFaucet = \"Kitchen_optima_faucet\",\n  Faucet = \"Optima_faucet\",\n  Dishwasher = \"Dishwasher\",\n  WashingMachine = \"Washing_machine\",\n}\n\nexport interface ApartmentData {\n  [index: string]: any;\n  people: string;\n  [Appliance.Shower]: { measurements: Measurement[] };\n  [Appliance.KitchenFaucet]: { measurements: Measurement[] };\n  [Appliance.Faucet]: { measurements: Measurement[] };\n  [Appliance.Dishwasher]: { measurements: Measurement[] };\n  [Appliance.WashingMachine]: { measurements: Measurement[] };\n}\n\nexport interface HouseData {\n  apartments: ApartmentData[];\n}\n\nexport interface DataSet {\n  houses: HouseData[];\n}\n\nexport const filterData = (data: DataSet, from?: string, to?: string) => {\n  const filteredDataSet: DataSet = { houses: [{ apartments: [] }] };\n  data.houses[0].apartments.forEach((a) => {\n    filteredDataSet.houses[0].apartments.push({\n      ...a,\n      [Appliance.Shower]: {\n        measurements: a[Appliance.Shower].measurements.filter(\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\n        ),\n      },\n      [Appliance.KitchenFaucet]: {\n        measurements: a[Appliance.KitchenFaucet].measurements.filter(\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\n        ),\n      },\n      [Appliance.Faucet]: {\n        measurements: a[Appliance.Faucet].measurements.filter(\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\n        ),\n      },\n      [Appliance.Dishwasher]: {\n        measurements: a[Appliance.Dishwasher].measurements.filter(\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\n        ),\n      },\n      [Appliance.WashingMachine]: {\n        measurements: a[Appliance.WashingMachine].measurements.filter(\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\n        ),\n      },\n    });\n  });\n  return filteredDataSet;\n};\n\nconst dataSet = data as unknown as DataSet;\nconst filteredDataSet = filterData(dataSet, undefined, currentDate.toString());\n\nconst DataContext = createContext(filteredDataSet);\n\nexport default DataContext;\n","import { Button } from \"@chakra-ui/button\";\nimport { DataSet } from \"../context/DataContext\";\nimport { Form, Formik, Field, ErrorMessage } from \"formik\";\nimport { useContext } from \"react\";\nimport GoalContext from \"../context/GoalContext\";\n\nenum GoalType {\n  Liters = \"Liters\",\n  Money = \"Money\",\n}\n\ninterface MonthlyGoal {\n  monthlyGoalType: string;\n  monthlyGoalAmount: string;\n}\n\nexport const GoalSetter = ({ data }: { data: DataSet }) => {\n  const { setGoal } = useContext(GoalContext);\n  const handleSubmit = (values: MonthlyGoal, {}) => {\n    console.log(\"calculate matching goal\", values);\n    if (values.monthlyGoalType === \"Liters\") {\n      localStorage.setItem(\"Liters\", values.monthlyGoalAmount);\n      setGoal(values.monthlyGoalAmount);\n    } else {\n      //do magic\n      const litersFromMoney = Math.random();\n      localStorage.setItem(\"Liters\", litersFromMoney.toString());\n      setGoal(litersFromMoney.toString());\n    }\n\n    //calculate related liters/money\n    //save to local state\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          monthlyGoalType: GoalType.Liters.toString(),\n          monthlyGoalAmount: \"4000\",\n        }}\n        onSubmit={handleSubmit}\n        //validate\n      >\n        {({ values, handleChange, handleBlur }) => (\n          <Form>\n            <select\n              name=\"monthlyGoalType\"\n              value={values.monthlyGoalType}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            >\n              <option value=\"\" label=\"Select a type\" />\n              <option\n                value={GoalType.Liters.toString()}\n                label={GoalType.Liters.toString()}\n              />\n              <option\n                value={GoalType.Money.toString()}\n                label={GoalType.Money.toString()}\n              />\n            </select>\n\n            <Field\n              type=\"text\"\n              name=\"monthlyGoalAmount\"\n              style={{ backgroundColor: \"yellow\" }}\n            />\n            <ErrorMessage name=\"monthlyGoalAmount\" component=\"div\" />\n\n            <Button type=\"submit\">Set Goal</Button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import { ResponsiveRadar } from \"@nivo/radar\";\nimport {\n  Appliance,\n} from \"./context/DataContext\";\n\ninterface TotalUsageByDeviceChartProps {\n  data: {\n    device: Appliance;\n    total: number;\n  }[];\n}\n\nexport const TotalUsageByDeviceChart = ({\n  data,\n}: TotalUsageByDeviceChartProps) => {\n  return (\n    <div className=\"responsive-chart-wrapper\">\n      <h3>Total Consumption For Current Month</h3>\n      <ResponsiveRadar\n        data={data}\n        keys={[\"total\"]}\n        indexBy=\"device\"\n        valueFormat=\">-.2f\"\n        margin={{ top: 60, right: 80, bottom: 60, left: 80 }}\n        borderColor={{ from: \"color\" }}\n        gridLabelOffset={24}\n        dotSize={10}\n        dotColor={{ theme: \"background\" }}\n        dotBorderWidth={2}\n        colors={{ scheme: \"nivo\" }}\n        blendMode=\"multiply\"\n        motionConfig=\"wobbly\"\n        legends={[\n          {\n            anchor: \"bottom\",\n            direction: \"column\",\n            translateX: -50,\n            translateY: -60,\n            itemWidth: 80,\n            itemHeight: 20,\n            itemTextColor: \"#999\",\n            symbolSize: 12,\n            symbolShape: \"circle\",\n            effects: [\n              {\n                on: \"hover\",\n                style: {\n                  itemTextColor: \"#000\",\n                },\n              },\n            ],\n          },\n        ]}\n      />\n    </div>\n  );\n};\n","import { ResponsiveBar } from \"@nivo/bar\";\nimport { sumBy } from \"lodash\";\nimport { useMemo } from \"react\";\nimport {\n  currentDate,\n  DataSet,\n  Appliance,\n  filterData,\n  Measurement,\n} from \"../context/DataContext\";\n\nconst barColors = {\n  [`${Appliance.Dishwasher}Color`]: \"hsl(345, 70%, 50%)\",\n  [`${Appliance.Faucet}Color`]: \"hsl(345, 70%, 50%)\",\n  [`${Appliance.KitchenFaucet}Color`]: \"hsl(345, 70%, 50%)\",\n  [`${Appliance.Shower}Color`]: \"hsl(345, 70%, 50%)\",\n  [`${Appliance.WashingMachine}Color`]: \"hsl(345, 70%, 50%)\",\n};\n\nexport const UsagePerDayChart = ({ data }: { data: DataSet }) => {\n  const getUsagePerDayData = useMemo(() => {\n    const chartData = [];\n    for (let i = 1; i <= currentDate.day; i++) {\n      const dayData = filterData(\n        data,\n        currentDate.set({ day: i }).startOf(\"day\").toString(),\n        currentDate.set({ day: i }).endOf(\"day\").toString()\n      );\n      chartData.push({\n        day: i,\n        [Appliance.Dishwasher]: sumBy(\n          dayData.houses[0].apartments[0][Appliance.Dishwasher].measurements,\n          (x) => parseFloat((x as Measurement).Consumption)\n        ),\n        [Appliance.Faucet]: sumBy(\n          dayData.houses[0].apartments[0][Appliance.Faucet].measurements,\n          (x) => parseFloat((x as Measurement).Consumption)\n        ),\n        [Appliance.KitchenFaucet]: sumBy(\n          dayData.houses[0].apartments[0][Appliance.KitchenFaucet].measurements,\n          (x) => parseFloat((x as Measurement).Consumption)\n        ),\n        [Appliance.Shower]: sumBy(\n          dayData.houses[0].apartments[0][Appliance.Shower].measurements,\n          (x) => parseFloat((x as Measurement).Consumption)\n        ),\n        [Appliance.WashingMachine]: sumBy(\n          dayData.houses[0].apartments[0][Appliance.WashingMachine]\n            .measurements,\n          (x) => parseFloat((x as Measurement).Consumption)\n        ),\n        ...barColors,\n      });\n    }\n\n    return chartData;\n  }, [data]);\n\n  const chartData = getUsagePerDayData;\n\n  return (\n    <div className=\"responsive-chart-wrapper\">\n      <h3>Consumption Per Day By Device</h3>\n      <ResponsiveBar\n        data={chartData}\n        keys={Object.values(Appliance)}\n        indexBy=\"day\"\n        valueFormat=\">-.2f\"\n        margin={{ top: 70, right: 180, bottom: 40, left: 80 }}\n        borderColor={{ from: \"color\" }}\n        enableLabel={false}\n        legends={[\n          {\n            dataFrom: \"keys\",\n            anchor: \"bottom-right\",\n            direction: \"column\",\n            justify: false,\n            translateX: 120,\n            translateY: 0,\n            itemsSpacing: 2,\n            itemWidth: 100,\n            itemHeight: 20,\n            itemDirection: \"left-to-right\",\n            itemOpacity: 0.85,\n            symbolSize: 20,\n            effects: [\n              {\n                on: \"hover\",\n                style: {\n                  itemOpacity: 1,\n                },\n              },\n            ],\n          },\n        ]}\n      />\n    </div>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\n\ninterface MenuCategoryStripProps {\n  categories: string[];\n  activeCategory: string | null;\n  setActiveCategory: React.Dispatch<React.SetStateAction<string | null>>;\n}\n\nexport const MenuCategoryStrip = ({\n  categories,\n  activeCategory,\n  setActiveCategory,\n}: MenuCategoryStripProps) => {\n  const onCategoryClick = (category: string) => {\n    if (activeCategory === category) {\n      setActiveCategory(null);\n      return;\n    }\n    setActiveCategory(category);\n  };\n\n  const categoryButtons = categories.map((category, index) => (\n    <Button\n      key={index}\n      onClick={() => onCategoryClick(category)}\n      style={{ backgroundColor: category === activeCategory ? \"red\" : \"grey\" }}\n    >\n      {category}\n    </Button>\n  ));\n\n  return <div>{categoryButtons}</div>;\n};\n","import { createContext } from \"react\";\n\nconst GoalContext = createContext({\n  goal: localStorage.getItem(\"Liters\"),\n  setGoal: (goal: string) => {\n    console.log(goal);\n  },\n});\n\nexport default GoalContext;\n","import { Box, Heading, Text, Flex, Spacer } from \"@chakra-ui/layout\";\nimport { useContext } from \"react\";\nimport GoalContext from \"../context/GoalContext\";\n\ninterface SpendCardProps {\n  amount: number;\n}\n\nexport const SpendCard = ({ amount }: SpendCardProps) => {\n  const { goal } = useContext(GoalContext);\n  return (\n    <Flex maxW=\"md\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\n      <Box p=\"4\" bg=\"red.400\">\n        <Heading as=\"h3\" size=\"lg\" display=\"inline\">\n          {amount} L\n        </Heading>\n        <Text display=\"inline\" fontSize=\"sm\">\n          {\" \"}\n          spent this month\n        </Text>\n      </Box>\n      <Spacer />\n      <Box p=\"4\" bg=\"green.400\">\n        <Heading as=\"h3\" size=\"lg\">\n          {goal ? <>Under {goal}L</> : <>No goal set</>}\n        </Heading>\n        {goal && <Text fontSize=\"sm\"> which is your set goal</Text>}\n      </Box>\n    </Flex>\n  );\n};\n","import { Appliance, DataSet } from \"./context/DataContext\";\n\nexport const getAverage = (data: DataSet, appliance: Appliance) =>\n  +(\n    data.houses[0].apartments.reduce((acc, appartment) => {\n      return (\n        acc +\n        appartment[appliance].measurements.reduce((acc, m) => {\n          return (\n            acc + parseFloat(m.Consumption) / parseFloat(appartment.people)\n          );\n        }, 0)\n      );\n    }, 0) / data.houses[0].apartments.length\n  ).toFixed(2);\n","import { Appliance } from \"../context/DataContext\";\n\nconst AverageList = (props: {\n  monthlySpend: { total: number; device: Appliance }[];\n  averageSpend: {\n    [Appliance.Dishwasher]: number;\n    [Appliance.Faucet]: number;\n    [Appliance.KitchenFaucet]: number;\n    [Appliance.Shower]: number;\n    [Appliance.WashingMachine]: number;\n    Total: number;\n  };\n  totalSpend: number;\n  peopleCount: number;\n}) => {\n  const diff = props.totalSpend / props.peopleCount - props.averageSpend.Total;\n  return (\n    <>\n      {diff > 0 ? (\n        <li>\n          Current total water spend per person this month is {diff.toFixed(2)}L\n          above the global average.\n        </li>\n      ) : (\n        <li>\n          Current total water spend per person this month is{\" \"}\n          {(diff * -1).toFixed(2)}L below the global average.\n        </li>\n      )}\n      {props.monthlySpend.map((data) => {\n        const diff =\n          data.total / props.peopleCount - props.averageSpend[data.device];\n        return diff > 0 ? (\n          <li>\n            Current total water spend per person with your {data.device} this\n            month is {diff.toFixed(2)}L above the global average.\n          </li>\n        ) : (\n          <li>\n            Current total water spend per person with your {data.device} this\n            month is {(diff * -1).toFixed(2)}L below the global average.\n          </li>\n        );\n      })}\n    </>\n  );\n};\n\nexport default AverageList;\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport React, { useContext, useMemo, useState } from \"react\";\nimport sumBy from \"lodash/sumBy\";\n\nimport \"./App.css\";\nimport DataContext, { currentDate, filterData } from \"./context/DataContext\";\nimport { TotalUsageByDeviceChart } from \"./TotalUsageByDeviceChart\";\nimport { UsagePerDayChart } from \"./charts/UsagePerDayChart\";\nimport { MenuCategoryStrip } from \"./components/MenuCategoryStrip\";\nimport { SpendCard } from \"./widgets/SpendCard\";\nimport { currentMonth, Appliance, Measurement } from \"./context/DataContext\";\nimport { getAverage } from \"./utils\";\nimport { sum } from \"lodash\";\nimport AverageList from \"./widgets/AverageList\";\nimport { GoalSetter } from \"./components/GoalSetter\";\nimport { ChallengesPage } from \"./pages/ChallengesPage\";\nimport GoalContext from \"./context/GoalContext\";\n\nenum MenuCategory {\n  Consumption = \"Consumption\",\n  Spend = \"Spend\",\n  Sustainability = \"Sustainability\",\n  Challenges = \"Challenges\",\n}\n\nfunction App() {\n  const [goal, setGoal] = useState(localStorage.getItem(\"Liters\"));\n  const data = useContext(DataContext);\n\n  const monthData = useMemo(() => {\n    return filterData(\n      data,\n      currentDate.startOf(\"month\").toString(),\n      currentDate.endOf(\"month\").toString()\n    );\n  }, [data]);\n\n  const applianceAverages = {\n    [Appliance.Dishwasher]: getAverage(monthData, Appliance.Dishwasher),\n    [Appliance.Faucet]: getAverage(monthData, Appliance.Faucet),\n    [Appliance.KitchenFaucet]: getAverage(monthData, Appliance.KitchenFaucet),\n    [Appliance.Shower]: getAverage(monthData, Appliance.Shower),\n    [Appliance.WashingMachine]: getAverage(monthData, Appliance.WashingMachine),\n  };\n  const monthlyAverages = {\n    ...applianceAverages,\n    Total: sum(Object.values(applianceAverages)),\n  };\n  const [activeCategory, setActiveCategory] = useState<string | null>(null);\n\n  const getTotalUsageByDeiceData = useMemo(() => {\n    //USE THE FIRST ONE\n    const myApartmentData = data.houses[0].apartments[0];\n\n    const summedData = Object.values(Appliance).map((device) => {\n      const myMeasurements = myApartmentData[device].measurements.filter(\n        (m) => m.TimeStamp >= currentMonth.toString()\n      );\n      return {\n        device,\n        total: sumBy(myMeasurements, (x) =>\n          parseFloat((x as Measurement).Consumption)\n        ),\n      };\n    });\n\n    return summedData;\n  }, [data.houses]);\n\n  const getTotalConsumption = useMemo(() => {\n    return Math.floor(sumBy(getTotalUsageByDeiceData, (x) => x.total));\n  }, [getTotalUsageByDeiceData]);\n\n  return (\n    <GoalContext.Provider value={{ goal, setGoal }}>\n      <ChakraProvider>\n        <div className=\"App\">\n          <MenuCategoryStrip\n            categories={Object.values(MenuCategory)}\n            activeCategory={activeCategory}\n            setActiveCategory={setActiveCategory}\n          />\n          <GoalSetter data={data} />\n          <SpendCard amount={getTotalConsumption} />\n          {activeCategory === null && (\n            <TotalUsageByDeviceChart data={getTotalUsageByDeiceData} />\n          )}\n          {activeCategory === MenuCategory.Consumption && (\n            <>\n              <UsagePerDayChart data={monthData} />\n              <AverageList\n                monthlySpend={getTotalUsageByDeiceData}\n                averageSpend={monthlyAverages}\n                totalSpend={getTotalConsumption}\n                peopleCount={parseFloat(data.houses[0].apartments[0].people)}\n              />\n            </>\n          )}\n          {activeCategory === MenuCategory.Challenges && <ChallengesPage />}\n        </div>\n      </ChakraProvider>\n    </GoalContext.Provider>\n  );\n}\n\nexport default App;\n","import { Box, Heading, BoxProps, Text } from \"@chakra-ui/layout\";\nimport { Button } from \"@chakra-ui/button\";\n\ninterface ChallengeCardProps extends BoxProps {\n    title: string;\n    subtext: string;\n    onClick: () => void;\n}\n\nexport const ChallengeCard = ({\n    title,\n    onClick,\n    subtext,\n    ...rest\n}: ChallengeCardProps) => {\n    return (\n        <Button onClick={onClick}>\n            <Box p={5} shadow=\"md\" borderWidth=\"1px\" {...rest}>\n                <Heading fontSize=\"xl\">{title}</Heading>\n                <Text>{subtext}</Text>\n            </Box>\n        </Button>\n    )\n};\n","import { useState } from \"react\";\nimport { Heading, Stack, Text } from \"@chakra-ui/layout\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter } from \"@chakra-ui/modal\";\nimport { ChallengeCard } from '../widgets/ChallengeCard'\n\nexport const ChallengesPage = () => {\n    const [selectedChallenge, setSelectedChallenge] = useState<string | null>(null);\n\n    interface challengeList {\n        [index: string]: {\n            id: string,\n            title: string,\n            desc: string,\n            progress: string,\n            nonStarted: boolean,\n        };\n    }\n\n    const yourChallenges: challengeList = {\n        \"id-1\": {\n            id: \"id-1\",\n            title: \"Plan Money\",\n            desc: \"The future can be even brighter but a goal without a plan is just a wish\",\n            progress: \"Not started\",\n            nonStarted: true,\n        },\n        \"id-2\": {\n            id: \"id-2\",\n            title: \"Save Money\",\n            desc: \"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings on your own terms with our completely automated process\",\n            progress: \"complete\",\n            nonStarted: false,\n        }\n    }\n\n    const dailyChallenges: challengeList = {\n        \"id-3\": {\n            id: \"id-3\",\n            title: \"Plan Money\",\n            desc: \"The future can be even brighter but a goal without a plan is just a wish\",\n            progress: \"1 out of 10\",\n            nonStarted: true,\n        },\n        \"id-4\": {\n            id: \"id-4\",\n            title: \"Save Money\",\n            desc: \"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings on your own terms with our completely automated process\",\n            progress: \"1 out of 10\",\n            nonStarted: false,\n        }\n    }\n\n    const monthlyChallenges: challengeList = {\n        \"id-6\": {\n            id: \"id-6\",\n            title: \"Plan Money\",\n            desc: \"The future can be even brighter but a goal without a plan is just a wish\",\n            progress: \"1 out of 10\",\n            nonStarted: false,\n        },\n    }\n\n    const allChallenges = { ...yourChallenges, ...dailyChallenges, ...monthlyChallenges };\n\n    const mapChallenges = (list: challengeList) => {\n        return Object.values(list).\n            map(x => <ChallengeCard\n                onClick={() => setSelectedChallenge(x.id)}\n                title={x.title}\n                subtext={x.progress}\n            />)\n\n    }\n\n    return (\n        <>\n            <Heading >Your Challenges</Heading>\n            <Stack spacing={8}>\n                {mapChallenges(yourChallenges)}\n            </Stack>\n            <Heading>All Challenges</Heading>\n            <Heading as=\"h3\" size=\"lg\">Daily</Heading>\n            <Stack spacing={8}>\n                {mapChallenges(dailyChallenges)}\n            </Stack>\n            <Heading as=\"h3\" size=\"lg\">Monthly</Heading>\n            <Stack spacing={8}>\n                {mapChallenges(monthlyChallenges)}\n            </Stack>\n\n            <Modal isOpen={Boolean(selectedChallenge)} onClose={() => setSelectedChallenge(null)}>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>\n                        {selectedChallenge && allChallenges[selectedChallenge].title}\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <Text>\n                            {selectedChallenge && allChallenges[selectedChallenge].desc}\n                        </Text>\n                        <Text>\n                            {selectedChallenge && allChallenges[selectedChallenge].progress}\n                        </Text>\n                        {selectedChallenge &&\n                            allChallenges[selectedChallenge].nonStarted &&\n                            <Button colorScheme=\"green\">Start</Button>\n                        }\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <Button colorScheme=\"blue\" mr={3} onClick={() => setSelectedChallenge(null)}>\n                            Close\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>)\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}