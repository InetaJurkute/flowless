{"version":3,"sources":["context/DataContext.tsx","components/GoalSetter.tsx","TotalUsageByDeviceChart.tsx","charts/UsagePerDayChart.tsx","components/MenuCategoryStrip.tsx","context/GoalContext.tsx","widgets/SpendCard.tsx","utils.tsx","widgets/AverageList.tsx","App.tsx","widgets/ChallengeCard.tsx","pages/ChallengesPage.tsx","reportWebVitals.ts","index.tsx"],"names":["Appliance","currentDate","DateTime","now","minus","years","currentMonth","startOf","GoalType","filterData","data","from","to","filteredDataSet","houses","apartments","forEach","a","push","Shower","measurements","filter","m","TimeStamp","KitchenFaucet","Faucet","Dishwasher","WashingMachine","undefined","toString","DataContext","createContext","TotalUsageByDeviceChart","className","keys","indexBy","valueFormat","margin","top","right","bottom","left","borderColor","gridLabelOffset","dotSize","dotColor","theme","dotBorderWidth","colors","scheme","blendMode","motionConfig","legends","anchor","direction","translateX","translateY","itemWidth","itemHeight","itemTextColor","symbolSize","symbolShape","effects","on","style","barColors","UsagePerDayChart","chartData","useMemo","i","day","dayData","set","endOf","sumBy","x","parseFloat","Consumption","Object","values","enableLabel","dataFrom","justify","itemsSpacing","itemDirection","itemOpacity","MenuCategoryStrip","categories","activeCategory","setActiveCategory","categoryButtons","map","category","index","onClick","onCategoryClick","backgroundColor","GoalContext","litersGoal","localStorage","getItem","setLitersGoal","goal","console","log","moneyGoal","setMoneyGoal","SpendCard","amount","useContext","maxW","borderWidth","borderRadius","overflow","p","bg","as","size","display","fontSize","getAverage","appliance","reduce","acc","appartment","people","length","toFixed","AverageList","props","diff","totalSpend","peopleCount","averageSpend","Total","monthlySpend","total","device","MenuCategory","getForecastedMoney","goalLiters","parseInt","monthlyGoalAmount","months","myApartmentData","sumByDevice","myMeasurements","liters","power","Power_Consumption","getAverageHeatingForLiterOfWater","GoalSetter","initialValues","monthlyGoalType","Liters","onSubmit","setItem","forecastedMoney","Money","litersFromMoney","Math","random","handleChange","handleBlur","name","value","onChange","onBlur","label","type","component","ChallengeCard","title","subtext","rest","shadow","ChallengesPage","useState","selectedChallenge","setSelectedChallenge","yourChallenges","id","desc","progress","nonStarted","dailyChallenges","monthlyChallenges","allChallenges","mapChallenges","list","spacing","isOpen","Boolean","onClose","colorScheme","mr","App","monthData","applianceAverages","monthlyAverages","sum","getTotalUsageByDeiceData","getTotalConsumption","floor","Provider","Challenges","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dbc7607.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nimport { DateTime } from \"luxon\";\r\nimport data from \"./db.json\";\r\n\r\nexport const currentDate = DateTime.now().minus({ years: 1 });\r\nexport const currentMonth = currentDate.startOf(\"month\");\r\n\r\nexport interface Measurement {\r\n  Consumption: string;\r\n  Temp: string;\r\n  FlowTime: string;\r\n  Power_Consumption: string;\r\n  TimeStamp: string;\r\n}\r\n\r\nexport enum Appliance {\r\n  Shower = \"Hydractiva_shower\",\r\n  KitchenFaucet = \"Kitchen_optima_faucet\",\r\n  Faucet = \"Optima_faucet\",\r\n  Dishwasher = \"Dishwasher\",\r\n  WashingMachine = \"Washing_machine\",\r\n}\r\n\r\nexport interface ApartmentData {\r\n  [index: string]: any;\r\n  people: string;\r\n  [Appliance.Shower]: { measurements: Measurement[] };\r\n  [Appliance.KitchenFaucet]: { measurements: Measurement[] };\r\n  [Appliance.Faucet]: { measurements: Measurement[] };\r\n  [Appliance.Dishwasher]: { measurements: Measurement[] };\r\n  [Appliance.WashingMachine]: { measurements: Measurement[] };\r\n}\r\n\r\nexport interface HouseData {\r\n  apartments: ApartmentData[];\r\n}\r\n\r\nexport interface DataSet {\r\n  houses: HouseData[];\r\n}\r\n\r\nexport const filterData = (data: DataSet, from?: string, to?: string) => {\r\n  const filteredDataSet: DataSet = { houses: [{ apartments: [] }] };\r\n  data.houses[0].apartments.forEach((a) => {\r\n    filteredDataSet.houses[0].apartments.push({\r\n      ...a,\r\n      [Appliance.Shower]: {\r\n        measurements: a[Appliance.Shower].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.KitchenFaucet]: {\r\n        measurements: a[Appliance.KitchenFaucet].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.Faucet]: {\r\n        measurements: a[Appliance.Faucet].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.Dishwasher]: {\r\n        measurements: a[Appliance.Dishwasher].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.WashingMachine]: {\r\n        measurements: a[Appliance.WashingMachine].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n    });\r\n  });\r\n  return filteredDataSet;\r\n};\r\n\r\nconst dataSet = data as unknown as DataSet;\r\nconst filteredDataSet = filterData(dataSet, undefined, currentDate.toString());\r\n\r\nconst DataContext = createContext(filteredDataSet);\r\n\r\nexport default DataContext;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  Appliance,\r\n  currentDate,\r\n  DataSet,\r\n  Measurement,\r\n} from \"../context/DataContext\";\r\nimport { Form, Formik, Field, ErrorMessage } from \"formik\";\r\nimport { sumBy } from \"lodash\";\r\nimport { useContext, useState } from \"react\";\r\nimport GoalContext from \"../context/GoalContext\";\r\n\r\nexport enum GoalType {\r\n  Liters = \"Liters\",\r\n  Money = \"Money\",\r\n}\r\n\r\ninterface MonthlyGoal {\r\n  monthlyGoalType: string;\r\n  monthlyGoalAmount: string;\r\n}\r\n\r\n//In Helsinki, residents pay 1.96 euros per cubic metre of clean drinking water.\r\nconst waterLiterPrice = 1.96 / 1000;\r\n\r\n// Finland Household, kWh price: 0.160 EURO\r\nconst electricityPrice = 0.16;\r\n\r\n//money needed by liters = liters * price + heating power * price\r\n//liters needed by money = average heating needed per last 12 months * price + average liters needed per last 12 months * price\r\n\r\nconst getAverageHeatingForLiterOfWater = (\r\n  data: DataSet,\r\n  months: number //use data from last N months\r\n) => {\r\n  const myApartmentData = data.houses[0].apartments[0];\r\n  const sumByDevice = Object.values(Appliance).map((appliance) => {\r\n    const myMeasurements = myApartmentData[appliance].measurements.filter(\r\n      (m) =>\r\n        m.TimeStamp >= currentDate.minus({ months }).toString() &&\r\n        m.TimeStamp <= currentDate.toString()\r\n    );\r\n\r\n    return {\r\n      liters: sumBy(myMeasurements, (x) =>\r\n        parseFloat((x as Measurement).Consumption)\r\n      ),\r\n      power: sumBy(myMeasurements, (x) =>\r\n        parseFloat((x as Measurement).Power_Consumption)\r\n      ),\r\n    };\r\n  });\r\n\r\n  const totalPower = sumBy(sumByDevice, (x) => x.power);\r\n  const totalLiters = sumBy(sumByDevice, (x) => x.liters);\r\n\r\n  return totalPower / totalLiters;\r\n};\r\n\r\nconst getForecastedMoney = (values: MonthlyGoal, data: DataSet) => {\r\n  const goalLiters = parseInt(values.monthlyGoalAmount);\r\n\r\n  const priceForWater = goalLiters * waterLiterPrice;\r\n  const energyNeededToHeatOneLiter = getAverageHeatingForLiterOfWater(data, 12);\r\n  const priceHeating =\r\n    energyNeededToHeatOneLiter * goalLiters * electricityPrice;\r\n\r\n  return priceForWater + priceHeating;\r\n};\r\n\r\nexport const GoalSetter = ({ data }: { data: DataSet }) => {\r\n  const { setLitersGoal, moneyGoal, setMoneyGoal } = useContext(GoalContext);\r\n\r\n  const handleSubmit = (values: MonthlyGoal, {}) => {\r\n    if (values.monthlyGoalType === GoalType.Liters) {\r\n      localStorage.setItem(GoalType.Liters, values.monthlyGoalAmount);\r\n      setLitersGoal(values.monthlyGoalAmount);\r\n      const forecastedMoney = getForecastedMoney(values, data);\r\n      localStorage.setItem(GoalType.Money, forecastedMoney.toFixed(2));\r\n      setMoneyGoal(forecastedMoney.toFixed(2));\r\n    } else {\r\n      localStorage.setItem(GoalType.Money, values.monthlyGoalAmount.toString());\r\n      setMoneyGoal(values.monthlyGoalAmount.toString());\r\n      //do magic\r\n\r\n      // TODO\r\n      const litersFromMoney = Math.random();\r\n      localStorage.setItem(GoalType.Liters, litersFromMoney.toString());\r\n      setLitersGoal(litersFromMoney.toString());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{\r\n          monthlyGoalType: GoalType.Liters.toString(),\r\n          monthlyGoalAmount: \"4000\",\r\n        }}\r\n        onSubmit={handleSubmit}\r\n        //validate\r\n      >\r\n        {({ values, handleChange, handleBlur }) => (\r\n          <Form>\r\n            <select\r\n              name=\"monthlyGoalType\"\r\n              value={values.monthlyGoalType}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            >\r\n              <option value=\"\" label=\"Select a type\" />\r\n              <option\r\n                value={GoalType.Liters.toString()}\r\n                label={GoalType.Liters.toString()}\r\n              />\r\n              <option\r\n                value={GoalType.Money.toString()}\r\n                label={GoalType.Money.toString()}\r\n              />\r\n            </select>\r\n\r\n            <Field\r\n              type=\"text\"\r\n              name=\"monthlyGoalAmount\"\r\n              style={{ backgroundColor: \"yellow\" }}\r\n            />\r\n            <ErrorMessage name=\"monthlyGoalAmount\" component=\"div\" />\r\n\r\n            <Button type=\"submit\">Set Goal</Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      {moneyGoal && (\r\n        <div>\r\n          You will spend ~{moneyGoal} EU on water if you stick to your goal!\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { ResponsiveRadar } from \"@nivo/radar\";\r\nimport {\r\n  Appliance,\r\n} from \"./context/DataContext\";\r\n\r\ninterface TotalUsageByDeviceChartProps {\r\n  data: {\r\n    device: Appliance;\r\n    total: number;\r\n  }[];\r\n}\r\n\r\nexport const TotalUsageByDeviceChart = ({\r\n  data,\r\n}: TotalUsageByDeviceChartProps) => {\r\n  return (\r\n    <div className=\"responsive-chart-wrapper\">\r\n      <h3>Total Consumption For Current Month</h3>\r\n      <ResponsiveRadar\r\n        data={data}\r\n        keys={[\"total\"]}\r\n        indexBy=\"device\"\r\n        valueFormat=\">-.2f\"\r\n        margin={{ top: 60, right: 80, bottom: 60, left: 80 }}\r\n        borderColor={{ from: \"color\" }}\r\n        gridLabelOffset={24}\r\n        dotSize={10}\r\n        dotColor={{ theme: \"background\" }}\r\n        dotBorderWidth={2}\r\n        colors={{ scheme: \"nivo\" }}\r\n        blendMode=\"multiply\"\r\n        motionConfig=\"wobbly\"\r\n        legends={[\r\n          {\r\n            anchor: \"bottom\",\r\n            direction: \"column\",\r\n            translateX: -50,\r\n            translateY: -60,\r\n            itemWidth: 80,\r\n            itemHeight: 20,\r\n            itemTextColor: \"#999\",\r\n            symbolSize: 12,\r\n            symbolShape: \"circle\",\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemTextColor: \"#000\",\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { ResponsiveBar } from \"@nivo/bar\";\r\nimport { sumBy } from \"lodash\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  currentDate,\r\n  DataSet,\r\n  Appliance,\r\n  filterData,\r\n  Measurement,\r\n} from \"../context/DataContext\";\r\n\r\nconst barColors = {\r\n  [`${Appliance.Dishwasher}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Faucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.KitchenFaucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Shower}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.WashingMachine}Color`]: \"hsl(345, 70%, 50%)\",\r\n};\r\n\r\nexport const UsagePerDayChart = ({ data }: { data: DataSet }) => {\r\n  const getUsagePerDayData = useMemo(() => {\r\n    const chartData = [];\r\n    for (let i = 1; i <= currentDate.day; i++) {\r\n      const dayData = filterData(\r\n        data,\r\n        currentDate.set({ day: i }).startOf(\"day\").toString(),\r\n        currentDate.set({ day: i }).endOf(\"day\").toString()\r\n      );\r\n      chartData.push({\r\n        day: i,\r\n        [Appliance.Dishwasher]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Dishwasher].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.Faucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Faucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.KitchenFaucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.KitchenFaucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.Shower]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Shower].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.WashingMachine]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.WashingMachine]\r\n            .measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        ...barColors,\r\n      });\r\n    }\r\n\r\n    return chartData;\r\n  }, [data]);\r\n\r\n  const chartData = getUsagePerDayData;\r\n\r\n  return (\r\n    <div className=\"responsive-chart-wrapper\">\r\n      <h3>Consumption Per Day By Device</h3>\r\n      <ResponsiveBar\r\n        data={chartData}\r\n        keys={Object.values(Appliance)}\r\n        indexBy=\"day\"\r\n        valueFormat=\">-.2f\"\r\n        margin={{ top: 70, right: 180, bottom: 40, left: 80 }}\r\n        borderColor={{ from: \"color\" }}\r\n        enableLabel={false}\r\n        legends={[\r\n          {\r\n            dataFrom: \"keys\",\r\n            anchor: \"bottom-right\",\r\n            direction: \"column\",\r\n            justify: false,\r\n            translateX: 120,\r\n            translateY: 0,\r\n            itemsSpacing: 2,\r\n            itemWidth: 100,\r\n            itemHeight: 20,\r\n            itemDirection: \"left-to-right\",\r\n            itemOpacity: 0.85,\r\n            symbolSize: 20,\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemOpacity: 1,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Button } from \"@chakra-ui/button\";\r\n\r\ninterface MenuCategoryStripProps {\r\n  categories: string[];\r\n  activeCategory: string | null;\r\n  setActiveCategory: React.Dispatch<React.SetStateAction<string | null>>;\r\n}\r\n\r\nexport const MenuCategoryStrip = ({\r\n  categories,\r\n  activeCategory,\r\n  setActiveCategory,\r\n}: MenuCategoryStripProps) => {\r\n  const onCategoryClick = (category: string) => {\r\n    if (activeCategory === category) {\r\n      setActiveCategory(null);\r\n      return;\r\n    }\r\n    setActiveCategory(category);\r\n  };\r\n\r\n  const categoryButtons = categories.map((category, index) => (\r\n    <Button\r\n      key={index}\r\n      onClick={() => onCategoryClick(category)}\r\n      style={{ backgroundColor: category === activeCategory ? \"red\" : \"grey\" }}\r\n    >\r\n      {category}\r\n    </Button>\r\n  ));\r\n\r\n  return <div>{categoryButtons}</div>;\r\n};\r\n","import { createContext } from \"react\";\r\n\r\nconst GoalContext = createContext({\r\n  litersGoal: localStorage.getItem(\"Liters\"),\r\n  setLitersGoal: (goal: string) => {\r\n    console.log(goal);\r\n  },\r\n  moneyGoal: localStorage.getItem(\"Liters\"),\r\n  setMoneyGoal: (goal: string) => {\r\n    console.log(goal);\r\n  },\r\n});\r\n\r\nexport default GoalContext;\r\n","import { Box, Heading, Text, Flex, Spacer } from \"@chakra-ui/layout\";\r\nimport { useContext } from \"react\";\r\nimport GoalContext from \"../context/GoalContext\";\r\n\r\ninterface SpendCardProps {\r\n  amount: number;\r\n}\r\n\r\nexport const SpendCard = ({ amount }: SpendCardProps) => {\r\n  const { litersGoal } = useContext(GoalContext);\r\n  return (\r\n    <Flex maxW=\"md\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\r\n      <Box p=\"4\" bg=\"red.400\">\r\n        <Heading as=\"h3\" size=\"lg\" display=\"inline\">\r\n          {amount} L\r\n        </Heading>\r\n        <Text display=\"inline\" fontSize=\"sm\">\r\n          {\" \"}\r\n          spent this month\r\n        </Text>\r\n      </Box>\r\n      <Spacer />\r\n      <Box p=\"4\" bg=\"green.400\">\r\n        <Heading as=\"h3\" size=\"lg\">\r\n          {litersGoal ? <>Under {litersGoal}L</> : <>No goal set</>}\r\n        </Heading>\r\n        {litersGoal && <Text fontSize=\"sm\"> which is your set goal</Text>}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Appliance, DataSet } from \"./context/DataContext\";\r\n\r\nexport const getAverage = (data: DataSet, appliance: Appliance) =>\r\n  +(\r\n    data.houses[0].apartments.reduce((acc, appartment) => {\r\n      return (\r\n        acc +\r\n        appartment[appliance].measurements.reduce((acc, m) => {\r\n          return (\r\n            acc + parseFloat(m.Consumption) / parseFloat(appartment.people)\r\n          );\r\n        }, 0)\r\n      );\r\n    }, 0) / data.houses[0].apartments.length\r\n  ).toFixed(2);\r\n","import { Appliance } from \"../context/DataContext\";\r\n\r\nconst AverageList = (props: {\r\n  monthlySpend: { total: number; device: Appliance }[];\r\n  averageSpend: {\r\n    [Appliance.Dishwasher]: number;\r\n    [Appliance.Faucet]: number;\r\n    [Appliance.KitchenFaucet]: number;\r\n    [Appliance.Shower]: number;\r\n    [Appliance.WashingMachine]: number;\r\n    Total: number;\r\n  };\r\n  totalSpend: number;\r\n  peopleCount: number;\r\n}) => {\r\n  const diff = props.totalSpend / props.peopleCount - props.averageSpend.Total;\r\n  return (\r\n    <>\r\n      {diff > 0 ? (\r\n        <li>\r\n          Current total water spend per person this month is {diff.toFixed(2)}L\r\n          above the global average.\r\n        </li>\r\n      ) : (\r\n        <li>\r\n          Current total water spend per person this month is{\" \"}\r\n          {(diff * -1).toFixed(2)}L below the global average.\r\n        </li>\r\n      )}\r\n      {props.monthlySpend.map((data) => {\r\n        const diff =\r\n          data.total / props.peopleCount - props.averageSpend[data.device];\r\n        return diff > 0 ? (\r\n          <li>\r\n            Current total water spend per person with your {data.device} this\r\n            month is {diff.toFixed(2)}L above the global average.\r\n          </li>\r\n        ) : (\r\n          <li>\r\n            Current total water spend per person with your {data.device} this\r\n            month is {(diff * -1).toFixed(2)}L below the global average.\r\n          </li>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AverageList;\r\n","import { ChakraProvider } from \"@chakra-ui/react\";\r\nimport React, { useContext, useMemo, useState } from \"react\";\r\nimport sumBy from \"lodash/sumBy\";\r\n\r\nimport \"./App.css\";\r\nimport DataContext, { currentDate, filterData } from \"./context/DataContext\";\r\nimport { TotalUsageByDeviceChart } from \"./TotalUsageByDeviceChart\";\r\nimport { UsagePerDayChart } from \"./charts/UsagePerDayChart\";\r\nimport { MenuCategoryStrip } from \"./components/MenuCategoryStrip\";\r\nimport { SpendCard } from \"./widgets/SpendCard\";\r\nimport { currentMonth, Appliance, Measurement } from \"./context/DataContext\";\r\nimport { getAverage } from \"./utils\";\r\nimport { sum } from \"lodash\";\r\nimport AverageList from \"./widgets/AverageList\";\r\nimport { GoalSetter, GoalType } from \"./components/GoalSetter\";\r\nimport { ChallengesPage } from \"./pages/ChallengesPage\";\r\nimport GoalContext from \"./context/GoalContext\";\r\n\r\nenum MenuCategory {\r\n  Consumption = \"Consumption\",\r\n  Spend = \"Spend\",\r\n  Sustainability = \"Sustainability\",\r\n  Challenges = \"Challenges\",\r\n}\r\n\r\nfunction App() {\r\n  const [litersGoal, setLitersGoal] = useState(\r\n    localStorage.getItem(GoalType.Liters)\r\n  );\r\n  const [moneyGoal, setMoneyGoal] = useState(\r\n    localStorage.getItem(GoalType.Money)\r\n  );\r\n  const data = useContext(DataContext);\r\n\r\n  const monthData = useMemo(() => {\r\n    return filterData(\r\n      data,\r\n      currentDate.startOf(\"month\").toString(),\r\n      currentDate.endOf(\"month\").toString()\r\n    );\r\n  }, [data]);\r\n\r\n  const applianceAverages = {\r\n    [Appliance.Dishwasher]: getAverage(monthData, Appliance.Dishwasher),\r\n    [Appliance.Faucet]: getAverage(monthData, Appliance.Faucet),\r\n    [Appliance.KitchenFaucet]: getAverage(monthData, Appliance.KitchenFaucet),\r\n    [Appliance.Shower]: getAverage(monthData, Appliance.Shower),\r\n    [Appliance.WashingMachine]: getAverage(monthData, Appliance.WashingMachine),\r\n  };\r\n  const monthlyAverages = {\r\n    ...applianceAverages,\r\n    Total: sum(Object.values(applianceAverages)),\r\n  };\r\n  const [activeCategory, setActiveCategory] = useState<string | null>(null);\r\n\r\n  const getTotalUsageByDeiceData = useMemo(() => {\r\n    //USE THE FIRST ONE\r\n    const myApartmentData = data.houses[0].apartments[0];\r\n\r\n    const summedData = Object.values(Appliance).map((device) => {\r\n      const myMeasurements = myApartmentData[device].measurements.filter(\r\n        (m) => m.TimeStamp >= currentMonth.toString()\r\n      );\r\n      return {\r\n        device,\r\n        total: sumBy(myMeasurements, (x) =>\r\n          parseFloat((x as Measurement).Consumption)\r\n        ),\r\n      };\r\n    });\r\n\r\n    return summedData;\r\n  }, [data.houses]);\r\n\r\n  const getTotalConsumption = useMemo(() => {\r\n    return Math.floor(sumBy(getTotalUsageByDeiceData, (x) => x.total));\r\n  }, [getTotalUsageByDeiceData]);\r\n\r\n  return (\r\n    <GoalContext.Provider\r\n      value={{ litersGoal, setLitersGoal, moneyGoal, setMoneyGoal }}\r\n    >\r\n      <ChakraProvider>\r\n        <div className=\"App\">\r\n          <MenuCategoryStrip\r\n            categories={Object.values(MenuCategory)}\r\n            activeCategory={activeCategory}\r\n            setActiveCategory={setActiveCategory}\r\n          />\r\n          <GoalSetter data={data} />\r\n          <SpendCard amount={getTotalConsumption} />\r\n          {activeCategory === null && (\r\n            <TotalUsageByDeviceChart data={getTotalUsageByDeiceData} />\r\n          )}\r\n          {activeCategory === MenuCategory.Consumption && (\r\n            <>\r\n              <UsagePerDayChart data={monthData} />\r\n              <AverageList\r\n                monthlySpend={getTotalUsageByDeiceData}\r\n                averageSpend={monthlyAverages}\r\n                totalSpend={getTotalConsumption}\r\n                peopleCount={parseFloat(data.houses[0].apartments[0].people)}\r\n              />\r\n            </>\r\n          )}\r\n          {activeCategory === MenuCategory.Challenges && <ChallengesPage />}\r\n        </div>\r\n      </ChakraProvider>\r\n    </GoalContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Box, Heading, BoxProps, Text } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/button\";\r\n\r\ninterface ChallengeCardProps extends BoxProps {\r\n    title: string;\r\n    subtext: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const ChallengeCard = ({\r\n    title,\r\n    onClick,\r\n    subtext,\r\n    ...rest\r\n}: ChallengeCardProps) => {\r\n    return (\r\n        <Button onClick={onClick}>\r\n            <Box p={5} shadow=\"md\" borderWidth=\"1px\" {...rest}>\r\n                <Heading fontSize=\"xl\">{title}</Heading>\r\n                <Text>{subtext}</Text>\r\n            </Box>\r\n        </Button>\r\n    )\r\n};\r\n","import { useState } from \"react\";\r\nimport { Heading, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter } from \"@chakra-ui/modal\";\r\nimport { ChallengeCard } from '../widgets/ChallengeCard'\r\n\r\nexport const ChallengesPage = () => {\r\n    const [selectedChallenge, setSelectedChallenge] = useState<string | null>(null);\r\n\r\n    interface challengeList {\r\n        [index: string]: {\r\n            id: string,\r\n            title: string,\r\n            desc: string,\r\n            progress: string,\r\n            nonStarted: boolean,\r\n        };\r\n    }\r\n\r\n    const yourChallenges: challengeList = {\r\n        \"id-1\": {\r\n            id: \"id-1\",\r\n            title: \"Plan Money\",\r\n            desc: \"The future can be even brighter but a goal without a plan is just a wish\",\r\n            progress: \"Not started\",\r\n            nonStarted: true,\r\n        },\r\n        \"id-2\": {\r\n            id: \"id-2\",\r\n            title: \"Save Money\",\r\n            desc: \"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings on your own terms with our completely automated process\",\r\n            progress: \"complete\",\r\n            nonStarted: false,\r\n        }\r\n    }\r\n\r\n    const dailyChallenges: challengeList = {\r\n        \"id-3\": {\r\n            id: \"id-3\",\r\n            title: \"Plan Money\",\r\n            desc: \"The future can be even brighter but a goal without a plan is just a wish\",\r\n            progress: \"1 out of 10\",\r\n            nonStarted: true,\r\n        },\r\n        \"id-4\": {\r\n            id: \"id-4\",\r\n            title: \"Save Money\",\r\n            desc: \"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings on your own terms with our completely automated process\",\r\n            progress: \"1 out of 10\",\r\n            nonStarted: false,\r\n        }\r\n    }\r\n\r\n    const monthlyChallenges: challengeList = {\r\n        \"id-6\": {\r\n            id: \"id-6\",\r\n            title: \"Plan Money\",\r\n            desc: \"The future can be even brighter but a goal without a plan is just a wish\",\r\n            progress: \"1 out of 10\",\r\n            nonStarted: false,\r\n        },\r\n    }\r\n\r\n    const allChallenges = { ...yourChallenges, ...dailyChallenges, ...monthlyChallenges };\r\n\r\n    const mapChallenges = (list: challengeList) => {\r\n        return Object.values(list).\r\n            map(x => <ChallengeCard\r\n                onClick={() => setSelectedChallenge(x.id)}\r\n                title={x.title}\r\n                subtext={x.progress}\r\n            />)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Heading >Your Challenges</Heading>\r\n            <Stack spacing={8}>\r\n                {mapChallenges(yourChallenges)}\r\n            </Stack>\r\n            <Heading>All Challenges</Heading>\r\n            <Heading as=\"h3\" size=\"lg\">Daily</Heading>\r\n            <Stack spacing={8}>\r\n                {mapChallenges(dailyChallenges)}\r\n            </Stack>\r\n            <Heading as=\"h3\" size=\"lg\">Monthly</Heading>\r\n            <Stack spacing={8}>\r\n                {mapChallenges(monthlyChallenges)}\r\n            </Stack>\r\n\r\n            <Modal isOpen={Boolean(selectedChallenge)} onClose={() => setSelectedChallenge(null)}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        {selectedChallenge && allChallenges[selectedChallenge].title}\r\n                    </ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Text>\r\n                            {selectedChallenge && allChallenges[selectedChallenge].desc}\r\n                        </Text>\r\n                        <Text>\r\n                            {selectedChallenge && allChallenges[selectedChallenge].progress}\r\n                        </Text>\r\n                        {selectedChallenge &&\r\n                            allChallenges[selectedChallenge].nonStarted &&\r\n                            <Button colorScheme=\"green\">Start</Button>\r\n                        }\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"blue\" mr={3} onClick={() => setSelectedChallenge(null)}>\r\n                            Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>)\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}