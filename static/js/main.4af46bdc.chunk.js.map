{"version":3,"sources":["context/DataContext.tsx","components/GoalSetter.tsx","charts/UsagePerDayChart.tsx","theme/colors.ts","widgets/SpendCard.tsx","components/icons/WaterIcon.tsx","TotalUsageByDeviceChart.tsx","utils.tsx","widgets/AverageList.tsx","context/GoalContext.tsx","App.tsx","widgets/ChallengeCard.tsx","pages/ChallengesPage.tsx","charts/PowerConsuptionPerDayChart.tsx","reportWebVitals.ts","index.tsx"],"names":["Appliance","currentDate","DateTime","now","minus","years","currentMonth","startOf","GoalType","filterData","data","from","to","filteredDataSet","houses","apartments","forEach","a","push","Shower","measurements","filter","m","TimeStamp","KitchenFaucet","Faucet","Dishwasher","WashingMachine","undefined","toString","DataContext","createContext","barColors","UsagePerDayChart","chartData","useMemo","i","day","dayData","set","endOf","sumBy","x","parseFloat","Consumption","className","keys","Object","values","indexBy","valueFormat","margin","top","right","bottom","left","borderColor","enableLabel","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","blueColor","mediumGrayColor","SpendCard","amount","measurementUnit","goalAmount","title","icon","textColor","bgColor","height","justifyContent","boxShadow","flexDirection","borderRadius","bg","color","padding","as","size","fontSize","fontWeight","marginTop","display","WaterIcon","border","width","alignItems","xmlns","enable-background","viewBox","fill","d","TotalUsageByDeviceChart","gridLabelOffset","dotSize","dotColor","theme","dotBorderWidth","colors","scheme","blendMode","motionConfig","itemTextColor","symbolShape","getAverage","appliance","reduce","acc","appartment","people","length","toFixed","AverageList","props","diff","totalSpend","peopleCount","averageSpend","Total","monthlySpend","map","total","device","GoalContext","litersGoal","localStorage","getItem","setLitersGoal","goal","console","log","moneyGoal","setMoneyGoal","MenuCategory","waterLiterPrice","getAverageHeatingForLiterOfWater","months","myApartmentData","sumByDevice","myMeasurements","liters","power","Power_Consumption","GoalSetter","useContext","useState","newGoalSet","setNewGoalSet","initialValues","monthlyGoalType","Liters","monthlyGoalAmount","onSubmit","setItem","forecastedMoney","goalLiters","parseInt","getForecastedBudget","Money","forecastedLiters","getForecastedLiters","handleChange","handleBlur","name","value","onChange","onBlur","label","type","backgroundColor","component","ChallengeCard","onClick","subtext","rest","p","shadow","borderWidth","ChallengesPage","selectedChallenge","setSelectedChallenge","yourChallenges","id","desc","progress","nonStarted","dailyChallenges","monthlyChallenges","allChallenges","mapChallenges","list","spacing","isOpen","Boolean","onClose","colorScheme","mr","PowerConsumptionPerDayChart","App","monthData","applianceAverages","monthlyAverages","sum","activeCategory","getTotalUsageByDeiceData","getTotalConsumption","Math","floor","Provider","textAlign","marginBottom","gap","templateRows","templateColumns","colStart","colEnd","rowStart","rowEnd","Number","Sustainability","Challenges","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4af46bdc.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nimport { DateTime } from \"luxon\";\r\nimport data from \"./db.json\";\r\n\r\nexport const currentDate = DateTime.now().minus({ years: 1 });\r\nexport const currentMonth = currentDate.startOf(\"month\");\r\n\r\nexport interface Measurement {\r\n  Consumption: string;\r\n  Temp: string;\r\n  FlowTime: string;\r\n  Power_Consumption: string;\r\n  TimeStamp: string;\r\n}\r\n\r\nexport enum Appliance {\r\n  Shower = \"Hydractiva_shower\",\r\n  KitchenFaucet = \"Kitchen_optima_faucet\",\r\n  Faucet = \"Optima_faucet\",\r\n  Dishwasher = \"Dishwasher\",\r\n  WashingMachine = \"Washing_machine\",\r\n}\r\n\r\nexport interface ApartmentData {\r\n  [index: string]: any;\r\n  people: string;\r\n  [Appliance.Shower]: { measurements: Measurement[] };\r\n  [Appliance.KitchenFaucet]: { measurements: Measurement[] };\r\n  [Appliance.Faucet]: { measurements: Measurement[] };\r\n  [Appliance.Dishwasher]: { measurements: Measurement[] };\r\n  [Appliance.WashingMachine]: { measurements: Measurement[] };\r\n}\r\n\r\nexport interface HouseData {\r\n  apartments: ApartmentData[];\r\n}\r\n\r\nexport interface DataSet {\r\n  houses: HouseData[];\r\n}\r\n\r\nexport const filterData = (data: DataSet, from?: string, to?: string) => {\r\n  const filteredDataSet: DataSet = { houses: [{ apartments: [] }] };\r\n  data.houses[0].apartments.forEach((a) => {\r\n    filteredDataSet.houses[0].apartments.push({\r\n      ...a,\r\n      [Appliance.Shower]: {\r\n        measurements: a[Appliance.Shower].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.KitchenFaucet]: {\r\n        measurements: a[Appliance.KitchenFaucet].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.Faucet]: {\r\n        measurements: a[Appliance.Faucet].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.Dishwasher]: {\r\n        measurements: a[Appliance.Dishwasher].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n      [Appliance.WashingMachine]: {\r\n        measurements: a[Appliance.WashingMachine].measurements.filter(\r\n          (m) => (!to || m.TimeStamp <= to) && (!from || m.TimeStamp >= from)\r\n        ),\r\n      },\r\n    });\r\n  });\r\n  return filteredDataSet;\r\n};\r\n\r\nconst dataSet = data as unknown as DataSet;\r\nconst filteredDataSet = filterData(dataSet, undefined, currentDate.toString());\r\n\r\nconst DataContext = createContext(filteredDataSet);\r\n\r\nexport default DataContext;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  Appliance,\r\n  currentDate,\r\n  DataSet,\r\n  Measurement,\r\n} from \"../context/DataContext\";\r\nimport { Form, Formik, Field, ErrorMessage } from \"formik\";\r\nimport { sumBy } from \"lodash\";\r\nimport { useContext, useState } from \"react\";\r\nimport GoalContext from \"../context/GoalContext\";\r\n\r\nexport enum GoalType {\r\n  Liters = \"Liters\",\r\n  Money = \"Budget\",\r\n}\r\n\r\ninterface MonthlyGoal {\r\n  monthlyGoalType: string;\r\n  monthlyGoalAmount: string;\r\n}\r\n\r\n//In Helsinki, residents pay 1.96 euros per cubic metre of clean drinking water.\r\nconst waterLiterPrice = 1.96 / 1000;\r\n\r\n// Finland Household, kWh price: 0.160 EURO\r\nconst electricityPrice = 0.16;\r\n\r\nconst getAverageHeatingForLiterOfWater = (\r\n  data: DataSet,\r\n  months: number //use data from last N months\r\n) => {\r\n  const myApartmentData = data.houses[0].apartments[0];\r\n  const sumByDevice = Object.values(Appliance).map((appliance) => {\r\n    const myMeasurements = myApartmentData[appliance].measurements.filter(\r\n      (m) =>\r\n        m.TimeStamp >= currentDate.minus({ months }).toString() &&\r\n        m.TimeStamp <= currentDate.toString()\r\n    );\r\n\r\n    return {\r\n      liters: sumBy(myMeasurements, (x) =>\r\n        parseFloat((x as Measurement).Consumption)\r\n      ),\r\n      power: sumBy(myMeasurements, (x) =>\r\n        parseFloat((x as Measurement).Power_Consumption)\r\n      ),\r\n    };\r\n  });\r\n\r\n  const totalPower = sumBy(sumByDevice, (x) => x.power);\r\n  const totalLiters = sumBy(sumByDevice, (x) => x.liters);\r\n\r\n  return totalPower / totalLiters;\r\n};\r\n\r\n// budget needed for litersGOAL = goalLiters * waterLiterPrice  +  average kWh used per liter * goalLiters * kWh price\r\nconst getForecastedBudget = (values: MonthlyGoal, data: DataSet) => {\r\n  const goalLiters = parseInt(values.monthlyGoalAmount);\r\n\r\n  const priceForWater = goalLiters * waterLiterPrice;\r\n  const energyNeededToHeatOneLiter = getAverageHeatingForLiterOfWater(data, 12);\r\n  const priceHeating =\r\n    energyNeededToHeatOneLiter * goalLiters * electricityPrice;\r\n\r\n  return priceForWater + priceHeating;\r\n};\r\n\r\n// priceForOneLiter = average kWh used per liter * kWh price + waterLiterPrice\r\n// liters needed for budgetGOAL = goalMoney / priceForOneLiter\r\nconst getForecastedLiters = (values: MonthlyGoal, data: DataSet) => {\r\n  const goalMoney = parseInt(values.monthlyGoalAmount);\r\n\r\n  const energyNeededToHeatOneLiter = getAverageHeatingForLiterOfWater(data, 12);\r\n  const priceForOneLiter =\r\n    energyNeededToHeatOneLiter * electricityPrice + waterLiterPrice;\r\n\r\n  return goalMoney / priceForOneLiter;\r\n};\r\n\r\nexport const GoalSetter = ({ data }: { data: DataSet }) => {\r\n  const { litersGoal, setLitersGoal, moneyGoal, setMoneyGoal } =\r\n    useContext(GoalContext);\r\n\r\n  const [newGoalSet, setNewGoalSet] = useState(false);\r\n\r\n  const handleSubmit = (values: MonthlyGoal, {}) => {\r\n    setNewGoalSet(true);\r\n    if (values.monthlyGoalType === GoalType.Liters) {\r\n      localStorage.setItem(GoalType.Liters, values.monthlyGoalAmount);\r\n      setLitersGoal(values.monthlyGoalAmount);\r\n\r\n      const forecastedMoney = getForecastedBudget(values, data);\r\n      localStorage.setItem(GoalType.Money, forecastedMoney.toFixed(2));\r\n      setMoneyGoal(forecastedMoney.toFixed(2));\r\n    } else if (values.monthlyGoalType === GoalType.Money) {\r\n      localStorage.setItem(GoalType.Money, values.monthlyGoalAmount.toString());\r\n      setMoneyGoal(values.monthlyGoalAmount.toString());\r\n\r\n      const forecastedLiters = getForecastedLiters(values, data);\r\n      localStorage.setItem(GoalType.Liters, forecastedLiters.toFixed(2));\r\n      setLitersGoal(forecastedLiters.toFixed(2));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{\r\n          monthlyGoalType: GoalType.Liters.toString(),\r\n          monthlyGoalAmount: \"4000\",\r\n        }}\r\n        onSubmit={handleSubmit}\r\n        //validate\r\n      >\r\n        {({ values, handleChange, handleBlur }) => (\r\n          <Form>\r\n            <select\r\n              name=\"monthlyGoalType\"\r\n              value={values.monthlyGoalType}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            >\r\n              <option value=\"\" label=\"Select a type\" />\r\n              <option\r\n                value={GoalType.Liters.toString()}\r\n                label={GoalType.Liters.toString()}\r\n              />\r\n              <option\r\n                value={GoalType.Money.toString()}\r\n                label={GoalType.Money.toString()}\r\n              />\r\n            </select>\r\n\r\n            <Field\r\n              type=\"text\"\r\n              name=\"monthlyGoalAmount\"\r\n              style={{ backgroundColor: \"yellow\" }}\r\n              onChange={(values: any) => {\r\n                setNewGoalSet(false);\r\n                handleChange(values);\r\n              }}\r\n            />\r\n            <ErrorMessage name=\"monthlyGoalAmount\" component=\"div\" />\r\n\r\n            <Button type=\"submit\">Set Goal</Button>\r\n\r\n            {newGoalSet && values.monthlyGoalType === GoalType.Liters && (\r\n              <div>\r\n                You will spend ~{moneyGoal} EU on water if you stick to your\r\n                goal!\r\n              </div>\r\n            )}\r\n\r\n            {newGoalSet && values.monthlyGoalType === GoalType.Money && (\r\n              <div>You should use ~{litersGoal} to hit your budget goal!</div>\r\n            )}\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import { ResponsiveBar } from \"@nivo/bar\";\r\nimport { sumBy } from \"lodash\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  currentDate,\r\n  DataSet,\r\n  Appliance,\r\n  filterData,\r\n  Measurement,\r\n} from \"../context/DataContext\";\r\n\r\nconst barColors = {\r\n  [`${Appliance.Dishwasher}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Faucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.KitchenFaucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Shower}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.WashingMachine}Color`]: \"hsl(345, 70%, 50%)\",\r\n};\r\n\r\nexport const UsagePerDayChart = ({ data }: { data: DataSet }) => {\r\n  const getUsagePerDayData = useMemo(() => {\r\n    const chartData = [];\r\n    for (let i = 1; i <= currentDate.day; i++) {\r\n      const dayData = filterData(\r\n        data,\r\n        currentDate.set({ day: i }).startOf(\"day\").toString(),\r\n        currentDate.set({ day: i }).endOf(\"day\").toString()\r\n      );\r\n      chartData.push({\r\n        day: i,\r\n        [Appliance.Dishwasher]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Dishwasher].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.Faucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Faucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.KitchenFaucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.KitchenFaucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.Shower]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Shower].measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        [Appliance.WashingMachine]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.WashingMachine]\r\n            .measurements,\r\n          (x) => parseFloat((x as Measurement).Consumption)\r\n        ),\r\n        ...barColors,\r\n      });\r\n    }\r\n\r\n    return chartData;\r\n  }, [data]);\r\n\r\n  const chartData = getUsagePerDayData;\r\n\r\n  return (\r\n    <div className=\"responsive-chart-wrapper\">\r\n      <h3>Consumption Per Day By Device This Month(L)</h3>\r\n      <ResponsiveBar\r\n        data={chartData}\r\n        keys={Object.values(Appliance)}\r\n        indexBy=\"day\"\r\n        valueFormat=\">-.2f\"\r\n        margin={{ top: 70, right: 180, bottom: 40, left: 80 }}\r\n        borderColor={{ from: \"color\" }}\r\n        enableLabel={false}\r\n        legends={[\r\n          {\r\n            dataFrom: \"keys\",\r\n            anchor: \"bottom-right\",\r\n            direction: \"column\",\r\n            justify: false,\r\n            translateX: 120,\r\n            translateY: 0,\r\n            itemsSpacing: 2,\r\n            itemWidth: 100,\r\n            itemHeight: 20,\r\n            itemDirection: \"left-to-right\",\r\n            itemOpacity: 0.85,\r\n            symbolSize: 20,\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemOpacity: 1,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export const blueColor = \"#03045e\";\r\nexport const mediumGrayColor = \"#e5e5e5\";","import { Box, Heading, Text, Flex } from \"@chakra-ui/layout\";\r\nimport { blueColor, mediumGrayColor } from \"../theme/colors\";\r\n\r\ninterface SpendCardProps {\r\n  amount: number;\r\n  measurementUnit: string;\r\n  title: string;\r\n  goalAmount: number;\r\n  icon?: React.ReactNode;\r\n  textColor?: string;\r\n  bgColor?: string;\r\n}\r\n\r\nexport const SpendCard = ({\r\n  amount,\r\n  measurementUnit,\r\n  goalAmount,\r\n  title,\r\n  icon,\r\n  textColor,\r\n  bgColor,\r\n}: SpendCardProps) => {\r\n  return (\r\n    <Flex\r\n      height=\"100%\"\r\n      justifyContent=\"space-between\"\r\n      boxShadow=\"base\"\r\n      flexDirection=\"column\"\r\n      borderRadius=\"lg\"\r\n      bg={bgColor || mediumGrayColor}\r\n      color={textColor || blueColor}\r\n      padding=\"16px\"\r\n    >\r\n      <Box>\r\n        {icon && icon}\r\n        <Heading as=\"h2\" size=\"md\" margin=\"16px 0\">\r\n          {title}\r\n        </Heading>\r\n      </Box>\r\n      <Box>\r\n        <Text fontSize=\"4xl\" fontWeight=\"regular\">\r\n          {amount} {measurementUnit}\r\n        </Text>\r\n      </Box>\r\n      <Box marginTop=\"32px\">\r\n        {goalAmount ? (\r\n          <>\r\n            <Text fontSize=\"sm\" fontWeight=\"regular\" display=\"inline\">\r\n              {`out of `}\r\n            </Text>\r\n            <Text fontSize=\"sm\" fontWeight=\"bold\" display=\"inline\">\r\n              {`${goalAmount} ${measurementUnit}`}\r\n            </Text>\r\n            <br />\r\n            <Text fontSize=\"sm\" fontWeight=\"regular\">\r\n              which is your set goal\r\n            </Text>\r\n          </>\r\n        ) : (\r\n          <Text fontSize=\"sm\" fontWeight=\"regular\">\r\n            No goal set\r\n          </Text>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Flex } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { blueColor } from \"../../theme/colors\";\r\n\r\nexport const WaterIcon = () => {\r\n  return (\r\n    <Flex\r\n      border={`2px solid ${blueColor}`}\r\n      width=\"40px\"\r\n      height=\"40px\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"lg\"\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        enable-background=\"new 0 0 24 24\"\r\n        height=\"24px\"\r\n        viewBox=\"0 0 24 24\"\r\n        width=\"24px\"\r\n        fill={blueColor}\r\n      >\r\n        <rect fill=\"none\" height=\"24\" width=\"24\" />\r\n        <path d=\"M12,2c-5.33,4.55-8,8.48-8,11.8c0,4.98,3.8,8.2,8,8.2s8-3.22,8-8.2C20,10.48,17.33,6.55,12,2z M12,20c-3.35,0-6-2.57-6-6.2 c0-2.34,1.95-5.44,6-9.14c4.05,3.7,6,6.79,6,9.14C18,17.43,15.35,20,12,20z M7.83,14c0.37,0,0.67,0.26,0.74,0.62 c0.41,2.22,2.28,2.98,3.64,2.87c0.43-0.02,0.79,0.32,0.79,0.75c0,0.4-0.32,0.73-0.72,0.75c-2.13,0.13-4.62-1.09-5.19-4.12 C7.01,14.42,7.37,14,7.83,14z\" />\r\n      </svg>\r\n    </Flex>\r\n  );\r\n};\r\n","import { ResponsiveRadar } from \"@nivo/radar\";\r\nimport { Appliance } from \"./context/DataContext\";\r\n\r\ninterface TotalUsageByDeviceChartProps {\r\n  data: {\r\n    device: Appliance;\r\n    total: number;\r\n  }[];\r\n}\r\n\r\nexport const TotalUsageByDeviceChart = ({\r\n  data,\r\n}: TotalUsageByDeviceChartProps) => {\r\n  return (\r\n    <div className=\"responsive-chart-wrapper\">\r\n      <h3>Total Consumption For Current Month</h3>\r\n      <ResponsiveRadar\r\n        data={data}\r\n        keys={[\"total\"]}\r\n        indexBy=\"device\"\r\n        valueFormat=\">-.2f\"\r\n        margin={{ top: 60, right: 80, bottom: 120, left: 80 }}\r\n        borderColor={{ from: \"color\" }}\r\n        gridLabelOffset={24}\r\n        dotSize={10}\r\n        dotColor={{ theme: \"background\" }}\r\n        dotBorderWidth={2}\r\n        colors={{ scheme: \"nivo\" }}\r\n        blendMode=\"multiply\"\r\n        motionConfig=\"wobbly\"\r\n        legends={[\r\n          {\r\n            anchor: \"bottom\",\r\n            direction: \"column\",\r\n            translateX: -50,\r\n            translateY: -120,\r\n            itemWidth: 80,\r\n            itemHeight: 20,\r\n            itemTextColor: \"#999\",\r\n            symbolSize: 12,\r\n            symbolShape: \"circle\",\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemTextColor: \"#000\",\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Appliance, DataSet } from \"./context/DataContext\";\r\n\r\nexport const getAverage = (data: DataSet, appliance: Appliance) =>\r\n  +(\r\n    data.houses[0].apartments.reduce((acc, appartment) => {\r\n      return (\r\n        acc +\r\n        appartment[appliance].measurements.reduce((acc, m) => {\r\n          return (\r\n            acc + parseFloat(m.Consumption) / parseFloat(appartment.people)\r\n          );\r\n        }, 0)\r\n      );\r\n    }, 0) / data.houses[0].apartments.length\r\n  ).toFixed(2);\r\n","import { Appliance } from \"../context/DataContext\";\r\n\r\nconst AverageList = (props: {\r\n  monthlySpend: { total: number; device: Appliance }[];\r\n  averageSpend: {\r\n    [Appliance.Dishwasher]: number;\r\n    [Appliance.Faucet]: number;\r\n    [Appliance.KitchenFaucet]: number;\r\n    [Appliance.Shower]: number;\r\n    [Appliance.WashingMachine]: number;\r\n    Total: number;\r\n  };\r\n  totalSpend: number;\r\n  peopleCount: number;\r\n}) => {\r\n  const diff = props.totalSpend / props.peopleCount - props.averageSpend.Total;\r\n  return (\r\n    <>\r\n      {diff > 0 ? (\r\n        <li>\r\n          Current total water spend per person this month is {diff.toFixed(2)}L\r\n          above the global average.\r\n        </li>\r\n      ) : (\r\n        <li>\r\n          Current total water spend per person this month is{\" \"}\r\n          {(diff * -1).toFixed(2)}L below the global average.\r\n        </li>\r\n      )}\r\n      {props.monthlySpend.map((data) => {\r\n        const diff =\r\n          data.total / props.peopleCount - props.averageSpend[data.device];\r\n        return diff > 0 ? (\r\n          <li>\r\n            Current total water spend per person with your {data.device} this\r\n            month is {diff.toFixed(2)}L above the global average.\r\n          </li>\r\n        ) : (\r\n          <li>\r\n            Current total water spend per person with your {data.device} this\r\n            month is {(diff * -1).toFixed(2)}L below the global average.\r\n          </li>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AverageList;\r\n","import { createContext } from \"react\";\r\n\r\nconst GoalContext = createContext({\r\n  litersGoal: localStorage.getItem(\"Liters\"),\r\n  setLitersGoal: (goal: string) => {\r\n    console.log(goal);\r\n  },\r\n  moneyGoal: localStorage.getItem(\"Liters\"),\r\n  setMoneyGoal: (goal: string) => {\r\n    console.log(goal);\r\n  },\r\n});\r\n\r\nexport default GoalContext;\r\n","import { ChakraProvider, Grid, GridItem, Heading } from \"@chakra-ui/react\";\r\nimport React, { useContext, useMemo, useState } from \"react\";\r\nimport sumBy from \"lodash/sumBy\";\r\n\r\nimport \"./App.css\";\r\nimport DataContext, { currentDate, filterData } from \"./context/DataContext\";\r\nimport { UsagePerDayChart } from \"./charts/UsagePerDayChart\";\r\nimport { SpendCard } from \"./widgets/SpendCard\";\r\nimport { currentMonth, Appliance, Measurement } from \"./context/DataContext\";\r\nimport { WaterIcon } from \"./components/icons/WaterIcon\";\r\nimport { blueColor, mediumGrayColor } from \"./theme/colors\";\r\nimport { TotalUsageByDeviceChart } from \"./TotalUsageByDeviceChart\";\r\nimport { getAverage } from \"./utils\";\r\nimport { sum } from \"lodash\";\r\nimport AverageList from \"./widgets/AverageList\";\r\nimport { GoalSetter, GoalType } from \"./components/GoalSetter\";\r\nimport { ChallengesPage } from \"./pages/ChallengesPage\";\r\nimport GoalContext from \"./context/GoalContext\";\r\nimport { PowerConsumptionPerDayChart } from \"./charts/PowerConsuptionPerDayChart\";\r\n\r\nenum MenuCategory {\r\n  Consumption = \"Consumption\",\r\n  Spend = \"Spend\",\r\n  Sustainability = \"Sustainability\",\r\n  Challenges = \"Challenges\",\r\n}\r\n\r\nfunction App() {\r\n  const [litersGoal, setLitersGoal] = useState(\r\n    localStorage.getItem(GoalType.Liters)\r\n  );\r\n  const [moneyGoal, setMoneyGoal] = useState(\r\n    localStorage.getItem(GoalType.Money)\r\n  );\r\n  const data = useContext(DataContext);\r\n\r\n  const monthData = useMemo(() => {\r\n    return filterData(\r\n      data,\r\n      currentDate.startOf(\"month\").toString(),\r\n      currentDate.endOf(\"month\").toString()\r\n    );\r\n  }, [data]);\r\n\r\n  const applianceAverages = {\r\n    [Appliance.Dishwasher]: getAverage(monthData, Appliance.Dishwasher),\r\n    [Appliance.Faucet]: getAverage(monthData, Appliance.Faucet),\r\n    [Appliance.KitchenFaucet]: getAverage(monthData, Appliance.KitchenFaucet),\r\n    [Appliance.Shower]: getAverage(monthData, Appliance.Shower),\r\n    [Appliance.WashingMachine]: getAverage(monthData, Appliance.WashingMachine),\r\n  };\r\n  const monthlyAverages = {\r\n    ...applianceAverages,\r\n    Total: sum(Object.values(applianceAverages)),\r\n  };\r\n  const [activeCategory, setActiveCategory] = useState<string | null>(null);\r\n\r\n  const getTotalUsageByDeiceData = useMemo(() => {\r\n    //USE THE FIRST ONE\r\n    const myApartmentData = data.houses[0].apartments[0];\r\n\r\n    const summedData = Object.values(Appliance).map((device) => {\r\n      const myMeasurements = myApartmentData[device].measurements.filter(\r\n        (m) => m.TimeStamp >= currentMonth.toString()\r\n      );\r\n      return {\r\n        device,\r\n        total: sumBy(myMeasurements, (x) =>\r\n          parseFloat((x as Measurement).Consumption)\r\n        ),\r\n      };\r\n    });\r\n\r\n    return summedData;\r\n  }, [data.houses]);\r\n\r\n  const getTotalConsumption = useMemo(() => {\r\n    return Math.floor(sumBy(getTotalUsageByDeiceData, (x) => x.total));\r\n  }, [getTotalUsageByDeiceData]);\r\n\r\n  return (\r\n    <GoalContext.Provider\r\n      value={{ litersGoal, setLitersGoal, moneyGoal, setMoneyGoal }}\r\n    >\r\n      <ChakraProvider>\r\n        <div className=\"App\">\r\n          {/* <MenuCategoryStrip\r\n            categories={Object.values(MenuCategory)}\r\n            activeCategory={activeCategory}\r\n            setActiveCategory={setActiveCategory}\r\n          /> */}\r\n          <GoalSetter data={data} />\r\n          <Heading textAlign=\"left\" as=\"h1\" size=\"xl\" marginBottom=\"32px\">\r\n            Welcome, <br />\r\n            here's your dashboard\r\n          </Heading>\r\n          <div className=\"dashboard-wrapper\">\r\n            <div className=\"flex-bigger\">\r\n              <TotalUsageByDeviceChart data={getTotalUsageByDeiceData} />\r\n            </div>\r\n            <div className=\"flex-small\">\r\n              <Grid\r\n                gap={4}\r\n                templateRows=\"repeat(5, 1fr)\"\r\n                templateColumns=\"repeat(2, 1fr)\"\r\n              >\r\n                <GridItem colStart={1} colEnd={2} rowStart={1} rowEnd={4}>\r\n                  <SpendCard\r\n                    icon={<WaterIcon />}\r\n                    title=\"Water Consumption\"\r\n                    amount={getTotalConsumption}\r\n                    measurementUnit=\"liters\"\r\n                    goalAmount={Number(litersGoal)}\r\n                    bgColor={mediumGrayColor}\r\n                    textColor={blueColor}\r\n                  />\r\n                </GridItem>\r\n                <GridItem colStart={2} colEnd={3} rowStart={1} rowEnd={3}>\r\n                  <SpendCard\r\n                    icon={<WaterIcon />}\r\n                    title=\"Water Consumption\"\r\n                    amount={getTotalConsumption}\r\n                    measurementUnit=\"liters\"\r\n                    goalAmount={120}\r\n                    bgColor={mediumGrayColor}\r\n                    textColor={blueColor}\r\n                  />\r\n                </GridItem>\r\n                <GridItem colStart={1} colEnd={2} rowStart={4} rowEnd={6}>\r\n                  <SpendCard\r\n                    icon={<WaterIcon />}\r\n                    title=\"Water Consumption\"\r\n                    amount={getTotalConsumption}\r\n                    measurementUnit=\"liters\"\r\n                    goalAmount={120}\r\n                    bgColor={mediumGrayColor}\r\n                    textColor={blueColor}\r\n                  />\r\n                </GridItem>\r\n                <GridItem colStart={2} colEnd={3} rowStart={3} rowEnd={6}>\r\n                  <SpendCard\r\n                    icon={<WaterIcon />}\r\n                    title=\"Water Consumption\"\r\n                    amount={getTotalConsumption}\r\n                    measurementUnit=\"liters\"\r\n                    goalAmount={120}\r\n                    bgColor={mediumGrayColor}\r\n                    textColor={blueColor}\r\n                  />\r\n                </GridItem>\r\n              </Grid>\r\n            </div>\r\n          </div>\r\n\r\n          {activeCategory === MenuCategory.Consumption && (\r\n            <>\r\n              <UsagePerDayChart data={monthData} />\r\n              <AverageList\r\n                monthlySpend={getTotalUsageByDeiceData}\r\n                averageSpend={monthlyAverages}\r\n                totalSpend={getTotalConsumption}\r\n                peopleCount={parseFloat(data.houses[0].apartments[0].people)}\r\n              />\r\n            </>\r\n          )}\r\n          {activeCategory === MenuCategory.Sustainability && (\r\n            <PowerConsumptionPerDayChart data={monthData} />\r\n          )}\r\n          {activeCategory === MenuCategory.Challenges && <ChallengesPage />}\r\n        </div>\r\n      </ChakraProvider>\r\n    </GoalContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Box, Heading, BoxProps, Text } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/button\";\r\n\r\ninterface ChallengeCardProps extends BoxProps {\r\n    title: string;\r\n    subtext: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const ChallengeCard = ({\r\n    title,\r\n    onClick,\r\n    subtext,\r\n    ...rest\r\n}: ChallengeCardProps) => {\r\n    return (\r\n        <Button onClick={onClick}>\r\n            <Box p={5} shadow=\"md\" borderWidth=\"1px\" {...rest}>\r\n                <Heading fontSize=\"xl\">{title}</Heading>\r\n                <Text>{subtext}</Text>\r\n            </Box>\r\n        </Button>\r\n    )\r\n};\r\n","import { useState } from \"react\";\r\nimport { Heading, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter } from \"@chakra-ui/modal\";\r\nimport { ChallengeCard } from '../widgets/ChallengeCard'\r\n\r\nexport const ChallengesPage = () => {\r\n    const [selectedChallenge, setSelectedChallenge] = useState<string | null>(null);\r\n\r\n    interface challengeList {\r\n        [index: string]: {\r\n            id: string,\r\n            title: string,\r\n            desc: string,\r\n            progress: string,\r\n            nonStarted: boolean,\r\n        };\r\n    }\r\n\r\n    const yourChallenges: challengeList = {\r\n        \"id-1\": {\r\n            id: \"id-1\",\r\n            title: \"Plan Money\",\r\n            desc: \"The future can be even brighter but a goal without a plan is just a wish\",\r\n            progress: \"Not started\",\r\n            nonStarted: true,\r\n        },\r\n        \"id-2\": {\r\n            id: \"id-2\",\r\n            title: \"Save Money\",\r\n            desc: \"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings on your own terms with our completely automated process\",\r\n            progress: \"complete\",\r\n            nonStarted: false,\r\n        }\r\n    }\r\n\r\n    const dailyChallenges: challengeList = {\r\n        \"id-3\": {\r\n            id: \"id-3\",\r\n            title: \"Plan Money\",\r\n            desc: \"The future can be even brighter but a goal without a plan is just a wish\",\r\n            progress: \"1 out of 10\",\r\n            nonStarted: true,\r\n        },\r\n        \"id-4\": {\r\n            id: \"id-4\",\r\n            title: \"Save Money\",\r\n            desc: \"You deserve good things. With a whooping 10-15% interest rate per annum, grow your savings on your own terms with our completely automated process\",\r\n            progress: \"1 out of 10\",\r\n            nonStarted: false,\r\n        }\r\n    }\r\n\r\n    const monthlyChallenges: challengeList = {\r\n        \"id-6\": {\r\n            id: \"id-6\",\r\n            title: \"Plan Money\",\r\n            desc: \"The future can be even brighter but a goal without a plan is just a wish\",\r\n            progress: \"1 out of 10\",\r\n            nonStarted: false,\r\n        },\r\n    }\r\n\r\n    const allChallenges = { ...yourChallenges, ...dailyChallenges, ...monthlyChallenges };\r\n\r\n    const mapChallenges = (list: challengeList) => {\r\n        return Object.values(list).\r\n            map(x => <ChallengeCard\r\n                onClick={() => setSelectedChallenge(x.id)}\r\n                title={x.title}\r\n                subtext={x.progress}\r\n            />)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Heading >Your Challenges</Heading>\r\n            <Stack spacing={8}>\r\n                {mapChallenges(yourChallenges)}\r\n            </Stack>\r\n            <Heading>All Challenges</Heading>\r\n            <Heading as=\"h3\" size=\"lg\">Daily</Heading>\r\n            <Stack spacing={8}>\r\n                {mapChallenges(dailyChallenges)}\r\n            </Stack>\r\n            <Heading as=\"h3\" size=\"lg\">Monthly</Heading>\r\n            <Stack spacing={8}>\r\n                {mapChallenges(monthlyChallenges)}\r\n            </Stack>\r\n\r\n            <Modal isOpen={Boolean(selectedChallenge)} onClose={() => setSelectedChallenge(null)}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        {selectedChallenge && allChallenges[selectedChallenge].title}\r\n                    </ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Text>\r\n                            {selectedChallenge && allChallenges[selectedChallenge].desc}\r\n                        </Text>\r\n                        <Text>\r\n                            {selectedChallenge && allChallenges[selectedChallenge].progress}\r\n                        </Text>\r\n                        {selectedChallenge &&\r\n                            allChallenges[selectedChallenge].nonStarted &&\r\n                            <Button colorScheme=\"green\">Start</Button>\r\n                        }\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"blue\" mr={3} onClick={() => setSelectedChallenge(null)}>\r\n                            Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>)\r\n};\r\n","import { ResponsiveBar } from \"@nivo/bar\";\r\nimport { sumBy } from \"lodash\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  currentDate,\r\n  DataSet,\r\n  Appliance,\r\n  filterData,\r\n  Measurement,\r\n} from \"../context/DataContext\";\r\n\r\nconst barColors = {\r\n  [`${Appliance.Dishwasher}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Faucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.KitchenFaucet}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.Shower}Color`]: \"hsl(345, 70%, 50%)\",\r\n  [`${Appliance.WashingMachine}Color`]: \"hsl(345, 70%, 50%)\",\r\n};\r\n\r\nexport const PowerConsumptionPerDayChart = ({ data }: { data: DataSet }) => {\r\n  const getPowerConsumptionPerDayData = useMemo(() => {\r\n    const chartData = [];\r\n    for (let i = 1; i <= currentDate.day; i++) {\r\n      const dayData = filterData(\r\n        data,\r\n        currentDate.set({ day: i }).startOf(\"day\").toString(),\r\n        currentDate.set({ day: i }).endOf(\"day\").toString()\r\n      );\r\n      chartData.push({\r\n        day: i,\r\n        [Appliance.Dishwasher]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Dishwasher].measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        [Appliance.Faucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Faucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        [Appliance.KitchenFaucet]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.KitchenFaucet].measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        [Appliance.Shower]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.Shower].measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        [Appliance.WashingMachine]: sumBy(\r\n          dayData.houses[0].apartments[0][Appliance.WashingMachine]\r\n            .measurements,\r\n          (x) => parseFloat((x as Measurement).Power_Consumption)\r\n        ),\r\n        ...barColors,\r\n      });\r\n    }\r\n\r\n    return chartData;\r\n  }, [data]);\r\n\r\n  const chartData = getPowerConsumptionPerDayData;\r\n\r\n  return (\r\n    <div className=\"responsive-chart-wrapper\">\r\n      <h3>Power Consumption Per Day By Device This Month(kWh)</h3>\r\n      <ResponsiveBar\r\n        data={chartData}\r\n        keys={Object.values(Appliance)}\r\n        indexBy=\"day\"\r\n        valueFormat=\">-.2f\"\r\n        margin={{ top: 70, right: 180, bottom: 40, left: 80 }}\r\n        borderColor={{ from: \"color\" }}\r\n        enableLabel={false}\r\n        legends={[\r\n          {\r\n            dataFrom: \"keys\",\r\n            anchor: \"bottom-right\",\r\n            direction: \"column\",\r\n            justify: false,\r\n            translateX: 120,\r\n            translateY: 0,\r\n            itemsSpacing: 2,\r\n            itemWidth: 100,\r\n            itemHeight: 20,\r\n            itemDirection: \"left-to-right\",\r\n            itemOpacity: 0.85,\r\n            symbolSize: 20,\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemOpacity: 1,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}